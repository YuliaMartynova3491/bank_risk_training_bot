"""
LangGraph –∞–≥–µ–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–∏—Å–∫–∞–º.
"""

import logging
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from enum import Enum

from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain.schema import Document

from config.settings import settings, DifficultyConfig


class LearningState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è."""
    ASSESSMENT = "assessment"
    QUESTION_GENERATION = "question_generation" 
    QUESTION_PRESENTATION = "question_presentation"
    ANSWER_EVALUATION = "answer_evaluation"
    DIFFICULTY_ADAPTATION = "difficulty_adaptation"
    LESSON_COMPLETION = "lesson_completion"
    TOPIC_TRANSITION = "topic_transition"


@dataclass
class LearningContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id: int
    current_difficulty: int = 1
    current_topic_id: Optional[int] = None
    current_lesson_id: Optional[int] = None
    questions_answered: int = 0
    correct_answers: int = 0
    consecutive_correct: int = 0
    consecutive_incorrect: int = 0
    session_history: List[Dict] = None
    knowledge_gaps: List[str] = None
    strengths: List[str] = None
    
    def __post_init__(self):
        if self.session_history is None:
            self.session_history = []
        if self.knowledge_gaps is None:
            self.knowledge_gaps = []
        if self.strengths is None:
            self.strengths = []


class LearningGraph:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å LangGraph –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    
    def __init__(self, knowledge_base, llm=None):
        self.knowledge_base = knowledge_base
        self.llm = llm
        self.graph = None
        self.contexts: Dict[int, LearningContext] = {}
    
    async def set_llm(self, llm):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ LLM –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        self.llm = llm
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –æ–±—É—á–µ–Ω–∏—è."""
    try:
        from langgraph.graph import StateGraph, END
        
        workflow = StateGraph(dict)
        
        # –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–∑–ª—ã
        workflow.add_node("assessment", self._assessment_node)
        workflow.add_node("question_generation", self._question_generation_node)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        workflow.add_edge("assessment", "question_generation")
        workflow.add_edge("question_generation", END)
        
        workflow.set_entry_point("assessment")
        
        self.graph = workflow.compile()
        
        logging.info("‚úÖ LangGraph –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LangGraph: {e}")
        raise
    
    async def start_learning_session(self, user_id: int, topic_id: int = None) -> Dict[str, Any]:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if user_id not in self.contexts:
                self.contexts[user_id] = LearningContext(user_id=user_id)
            
            context = self.contexts[user_id]
            context.current_topic_id = topic_id
            context.questions_answered = 0
            context.correct_answers = 0
            
            # –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∞
            initial_state = {
                "user_id": user_id,
                "context": context,
                "action": "start_session"
            }
            
            result = await self.graph.ainvoke(initial_state)
            return result
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    async def process_answer(self, user_id: int, question_id: int, answer: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if user_id not in self.contexts:
                return {"error": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            context = self.contexts[user_id]
            
            # –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ LangGraph –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
            return await self._process_answer_direct(context, answer)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {"error": str(e)}
    
    async def _process_answer_direct(self, context: LearningContext, answer: str) -> Dict[str, Any]:
        """–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ LangGraph."""
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if not hasattr(context, 'current_question'):
                return {"error": "–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"}
            
            question_data = context.current_question
            user_answer_index = int(answer) if answer.isdigit() else -1
            correct_answer_index = question_data.get("correct_answer", 0)
            
            is_correct = user_answer_index == correct_answer_index
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.questions_answered += 1
            if is_correct:
                context.correct_answers += 1
                context.consecutive_correct += 1
                context.consecutive_incorrect = 0
            else:
                context.consecutive_incorrect += 1
                context.consecutive_correct = 0
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if is_correct:
                feedback = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {question_data.get('explanation', '')}"
            else:
                correct_option = question_data.get('options', [])[correct_answer_index] if correct_answer_index < len(question_data.get('options', [])) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                feedback = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}\n\nüí° {question_data.get('explanation', '')}"
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            adaptation_made = False
            if context.consecutive_correct >= 2 and context.current_difficulty < 5:
                context.current_difficulty = min(context.current_difficulty + 1, 5)
                adaptation_made = True
                feedback += f"\n\nüéØ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {context.current_difficulty}!"
            elif context.consecutive_incorrect >= 2 and context.current_difficulty > 1:
                context.current_difficulty = max(context.current_difficulty - 1, 1)
                adaptation_made = True
                feedback += f"\n\nüìö –£—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω –¥–æ {context.current_difficulty} –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
            if context.questions_answered >= settings.questions_per_lesson:
                success_rate = context.correct_answers / context.questions_answered * 100
                lesson_passed = success_rate >= settings.min_lesson_score
                
                completion_data = {
                    "lesson_passed": lesson_passed,
                    "success_rate": success_rate,
                    "questions_answered": context.questions_answered,
                    "correct_answers": context.correct_answers,
                    "final_difficulty": context.current_difficulty
                }
                
                return {
                    "is_correct": is_correct,
                    "feedback": feedback,
                    "completion_data": completion_data
                }
            
            return {
                "is_correct": is_correct,
                "feedback": feedback,
                "adaptation_made": adaptation_made,
                "current_difficulty": context.current_difficulty
            }
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {"error": str(e)}
    
    # –£–∑–ª—ã –≥—Ä–∞—Ñ–∞
    async def _assessment_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª –æ—Ü–µ–Ω–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            context: LearningContext = state["context"]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database.database import db_manager
            from database.models import QuestionAttempt
            from sqlalchemy import select, desc
            
            async with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                recent_attempts = await session.execute(
                    select(QuestionAttempt)
                    .where(QuestionAttempt.user_id == context.user_id)
                    .order_by(desc(QuestionAttempt.created_at))
                    .limit(10)
                )
                attempts = recent_attempts.scalars().all()
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if attempts:
                correct_rate = sum(1 for a in attempts if a.is_correct) / len(attempts)
                
                # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if correct_rate >= 0.8 and context.current_difficulty < 5:
                    context.current_difficulty = min(context.current_difficulty + 1, 5)
                elif correct_rate <= 0.4 and context.current_difficulty > 1:
                    context.current_difficulty = max(context.current_difficulty - 1, 1)
            
            state["assessment_complete"] = True
            state["recommended_difficulty"] = context.current_difficulty
            
            logging.info(f"üë§ –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_id}: —É—Ä–æ–≤–µ–Ω—å {context.current_difficulty}")
            
            return state
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–∑–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")
            state["error"] = str(e)
            return state
    
    async def _question_generation_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
        try:
            context: LearningContext = state["context"]
            
            # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            difficulty_keywords = {
                1: ["–æ—Å–Ω–æ–≤—ã", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"],
                2: ["–ø—Ä–æ—Ü–µ–¥—É—Ä—ã", "–∫–∞–∫", "–º–µ—Ç–æ–¥—ã"],
                3: ["–∞–Ω–∞–ª–∏–∑", "–æ—Ü–µ–Ω–∫–∞", "—Å—Ü–µ–Ω–∞—Ä–∏–∏"],
                4: ["—Ä–∞—Å—á–µ—Ç", "—Ñ–æ—Ä–º—É–ª–∞", "—Å–ª–æ–∂–Ω—ã–µ"],
                5: ["—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ", "–ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π", "–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ"]
            }
            
            keywords = difficulty_keywords.get(context.current_difficulty, ["–æ—Å–Ω–æ–≤—ã"])
            search_query = f"–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∏—Å–∫–∏ {' '.join(keywords[:2])}"
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            relevant_docs = await self.knowledge_base.search(search_query, limit=3)
            
            if not relevant_docs:
                state["error"] = "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                return state
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º context_text –ó–î–ï–°–¨
            context_text = "\n".join([doc.page_content for doc in relevant_docs])
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM
            if self.llm:
                try:
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Qwen2.5)
                    from ai_agent.llm.prompts.qwen_prompts import QwenPrompts
                    
                    question_prompt = QwenPrompts.QUESTION_GENERATOR.format(
                        difficulty=context.current_difficulty,
                        topic="–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                        context=context_text
                    )
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM
                    from langchain_core.messages import HumanMessage, SystemMessage
                    
                    messages = [
                        SystemMessage(content=QwenPrompts.SYSTEM_EXPERT),
                        HumanMessage(content=question_prompt)
                    ]
                    
                    response = await self.llm.ainvoke(messages)
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
                    import json
                    try:
                        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        response_content = response.content.strip()
                        if response_content.startswith("```json"):
                            response_content = response_content[7:-3]
                        elif response_content.startswith("```"):
                            response_content = response_content[3:-3]
                        
                        question_data = json.loads(response_content)
                        state["generated_question"] = question_data
                        state["question_context"] = context_text
                        
                        logging.info(f"‚ùì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_id}")
                        return state
                        
                    except json.JSONDecodeError:
                        logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–ª–ª–±–µ–∫")
                        # –§–∞–ª–ª–±–µ–∫ –∫ –ø—Ä–æ—Å—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                        pass
                        
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–ª–ª–±–µ–∫")
            
            # –§–∞–ª–ª–±–µ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
            state["generated_question"] = self._create_fallback_question(context.current_difficulty)
            state["question_context"] = context_text
            
            logging.info(f"‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–ª–ª–±–µ–∫ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_id}")
            
            return state
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            state["error"] = str(e)
            return state
    
    async def _answer_evaluation_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            context: LearningContext = state["context"]
            user_answer = state.get("user_answer")
            question_data = state.get("generated_question", {})
            
            if not user_answer or not question_data:
                state["error"] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏"
                return state
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            correct_answer_index = question_data.get("correct_answer", 0)
            user_answer_index = int(user_answer) if user_answer.isdigit() else -1
            
            is_correct = user_answer_index == correct_answer_index
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.questions_answered += 1
            if is_correct:
                context.correct_answers += 1
                context.consecutive_correct += 1
                context.consecutive_incorrect = 0
            else:
                context.consecutive_incorrect += 1
                context.consecutive_correct = 0
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            attempt_record = {
                "question": question_data.get("question"),
                "user_answer": user_answer,
                "correct_answer": correct_answer_index,
                "is_correct": is_correct,
                "difficulty": context.current_difficulty,
                "timestamp": "now"
            }
            context.session_history.append(attempt_record)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self._save_question_attempt(
                user_id=context.user_id,
                question_data=question_data,
                user_answer=user_answer,
                is_correct=is_correct
            )
            
            state["is_correct"] = is_correct
            state["evaluation_complete"] = True
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if is_correct:
                feedback = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {question_data.get('explanation', '')}"
            else:
                correct_option = question_data.get('options', [])[correct_answer_index]
                feedback = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}\n\nüí° {question_data.get('explanation', '')}"
            
            state["feedback"] = feedback
            
            logging.info(f"üìä –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_id}: {'‚úÖ' if is_correct else '‚ùå'}")
            
            return state
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            state["error"] = str(e)
            return state
    
    async def _difficulty_adaptation_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
        try:
            context: LearningContext = state["context"]
            
            # –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            adaptation_made = False
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if context.consecutive_correct >= 2 and context.current_difficulty < 5:
                context.current_difficulty = min(context.current_difficulty + 1, 5)
                adaptation_made = True
                state["adaptation_message"] = f"üéØ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {DifficultyConfig.LEVEL_NAMES[context.current_difficulty]}!"
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–µ—Ä–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            elif context.consecutive_incorrect >= 2 and context.current_difficulty > 1:
                context.current_difficulty = max(context.current_difficulty - 1, 1)
                adaptation_made = True
                state["adaptation_message"] = f"üìö –£—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω –¥–æ {DifficultyConfig.LEVEL_NAMES[context.current_difficulty]} –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è"
            
            state["adaptation_made"] = adaptation_made
            state["current_difficulty"] = context.current_difficulty
            
            logging.info(f"üéØ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_id}: —É—Ä–æ–≤–µ–Ω—å {context.current_difficulty}")
            
            return state
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            state["error"] = str(e)
            return state
    
    async def _lesson_completion_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞."""
        try:
            context: LearningContext = state["context"]
            
            # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Ä–æ–∫–∞
            success_rate = context.correct_answers / max(context.questions_answered, 1) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            lesson_passed = success_rate >= settings.min_lesson_score
            
            completion_data = {
                "lesson_passed": lesson_passed,
                "success_rate": success_rate,
                "questions_answered": context.questions_answered,
                "correct_answers": context.correct_answers,
                "final_difficulty": context.current_difficulty
            }
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if lesson_passed:
                message = f"üéâ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_rate:.1f}%"
            else:
                message = f"üìö –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_rate:.1f}% (—Ç—Ä–µ–±—É–µ—Ç—Å—è {settings.min_lesson_score}%)"
            
            state["completion_data"] = completion_data
            state["completion_message"] = message
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            await self._save_lesson_progress(context.user_id, completion_data)
            
            logging.info(f"üèÅ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_id}: {success_rate:.1f}%")
            
            return state
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
            state["error"] = str(e)
            return state
    
    async def _topic_transition_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–£–∑–µ–ª –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ."""
        try:
            context: LearningContext = state["context"]
            
            # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
            
            next_topic_id = None
            if context.current_topic_id:
                next_topic_id = context.current_topic_id + 1
            
            state["next_topic_id"] = next_topic_id
            state["transition_complete"] = True
            
            logging.info(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–º–µ {next_topic_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_id}")
            
            return state
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–º–µ: {e}")
            state["error"] = str(e)
            return state
    
    # –§—É–Ω–∫—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    def _route_after_evaluation(self, state: Dict[str, Any]) -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
        context: LearningContext = state["context"]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        if context.questions_answered >= settings.questions_per_lesson:
            return "complete_lesson"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if context.consecutive_correct >= 3 and context.current_difficulty >= 4:
            return "next_topic"
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        return "continue"
    
    def _route_after_adaptation(self, state: Dict[str, Any]) -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
        context: LearningContext = state["context"]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        if context.questions_answered >= settings.questions_per_lesson:
            return "complete_lesson"
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
        return "continue"
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _create_fallback_question(self, difficulty: int) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        fallback_questions = {
            1: {
                "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ RTO –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏?",
                "options": [
                    "–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞",
                    "–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π", 
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏",
                    "–†–µ–∂–∏–º —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
                ],
                "correct_answer": 0,
                "explanation": "RTO (Recovery Time Objective) - —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≥—Ä–æ–∑—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏.",
                "difficulty": 1,
                "topic": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è"
            }
        }
        
        return fallback_questions.get(difficulty, fallback_questions[1])
    
    async def _save_question_attempt(self, user_id: int, question_data: Dict, user_answer: str, is_correct: bool):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            from database.models import QuestionAttempt
            from database.database import db_manager
            
            async with db_manager.get_session() as session:
                attempt = QuestionAttempt(
                    user_id=user_id,
                    question_id=None,  # –î–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                    user_answer=user_answer,
                    is_correct=is_correct,
                    ai_feedback=question_data.get("explanation"),
                    time_spent_seconds=None
                )
                session.add(attempt)
                await session.commit()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏: {e}")
    
    async def _save_lesson_progress(self, user_id: int, completion_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞."""
        try:
            from database.models import UserProgress
            from database.database import db_manager
            
            async with db_manager.get_session() as session:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                pass
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def get_user_context(self, user_id: int) -> Optional[LearningContext]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.contexts.get(user_id)
    
    def clear_user_context(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id in self.contexts:
            del self.contexts[user_id]