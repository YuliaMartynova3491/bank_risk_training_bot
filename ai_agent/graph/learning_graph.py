"""
LangGraph –≥—Ä–∞—Ñ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é.
"""

import logging
from typing import Dict, Any, List, Optional
import json

try:
    from langgraph.graph import StateGraph, END
    from langgraph.graph.message import add_messages
    from langchain_core.messages import BaseMessage, HumanMessage, AIMessage
    from typing_extensions import Annotated, TypedDict
    LANGGRAPH_AVAILABLE = True
except ImportError:
    logging.warning("‚ö†Ô∏è LangGraph –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    LANGGRAPH_AVAILABLE = False

try:
    from database.database import get_user_by_telegram_id, db_manager
    from database.models import User
    from sqlalchemy import select
    DATABASE_AVAILABLE = True
except ImportError:
    logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è learning_graph")
    DATABASE_AVAILABLE = False


class LearningState(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è LangGraph."""
    messages: Annotated[List[BaseMessage], add_messages]
    user_id: int
    current_difficulty: int
    focus_topics: List[str]
    question_count: int
    correct_answers: int
    current_question: Optional[Dict[str, Any]]
    session_active: bool


class LearningGraph:
    """–ì—Ä–∞—Ñ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ LangGraph —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self, knowledge_base=None, llm=None):
        self.knowledge_base = knowledge_base
        self.llm = llm
        self.graph = None
        self.is_initialized = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.min_difficulty = 1
        self.max_difficulty = 5
        self.questions_per_session = 10
        
        # –¢–µ–º—ã –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.difficulty_topics = {
            1: ["basic_concepts", "definitions", "simple_terms"],
            2: ["risk_identification", "threat_types", "basic_procedures"],
            3: ["risk_assessment", "impact_analysis", "intermediate_concepts"],
            4: ["mitigation_strategies", "business_continuity", "advanced_procedures"],
            5: ["regulatory_compliance", "complex_scenarios", "expert_level"]
        }
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            if not LANGGRAPH_AVAILABLE:
                logging.warning("‚ö†Ô∏è LangGraph –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
                self.is_initialized = True
                return True
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            workflow = StateGraph(LearningState)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —É–∑–ª—ã)
            workflow.add_node("assess_user", self.assess_user_level)
            workflow.add_node("generate_question", self.generate_question)
            workflow.add_node("check_completion", self.check_session_completion)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ä—ë–±—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            workflow.set_entry_point("assess_user")
            workflow.add_edge("assess_user", "generate_question")
            workflow.add_edge("generate_question", "check_completion")
            workflow.add_edge("check_completion", END)
            
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
            self.graph = workflow.compile()
            self.is_initialized = True
            
            logging.info("‚úÖ LangGraph –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LangGraph: {e}")
            # –í–∫–ª—é—á–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            self.is_initialized = True
            return True
    
    async def start_learning_session(
        self, 
        user_id: int, 
        difficulty_override: Optional[int] = None,
        focus_topics: Optional[List[str]] = None
    ) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            if not self.is_initialized:
                await self.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_difficulty = await self.get_user_difficulty(user_id)
            current_difficulty = difficulty_override or user_difficulty
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞
            if not focus_topics:
                focus_topics = self.difficulty_topics.get(current_difficulty, ["basic_concepts"])
            
            logging.info(f"üë§ –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —É—Ä–æ–≤–µ–Ω—å {current_difficulty}")
            
            if LANGGRAPH_AVAILABLE and self.graph:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LangGraph
                initial_state = LearningState(
                    messages=[],
                    user_id=user_id,
                    current_difficulty=current_difficulty,
                    focus_topics=focus_topics,
                    question_count=0,
                    correct_answers=0,
                    current_question=None,
                    session_active=True
                )
                
                result = await self.graph.ainvoke(initial_state)
                
                if result.get("current_question"):
                    return {
                        "success": True,
                        "generated_question": result["current_question"],
                        "difficulty": result["current_difficulty"],
                        "focus_topics": result["focus_topics"]
                    }
                else:
                    return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LangGraph"}
            else:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ LangGraph
                return await self.generate_simple_question(user_id, current_difficulty, focus_topics)
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    async def get_user_difficulty(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if DATABASE_AVAILABLE:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID, –∞ –Ω–µ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID
                from database.database import db_manager
                from database.models import User
                
                async with db_manager.get_session() as session:
                    user_result = await session.execute(
                        select(User).where(User.telegram_id == user_id)
                    )
                    user = user_result.scalar_one_or_none()
                    
                    if user:
                        level = user.current_difficulty_level
                        logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {level}")
                        return level
                    else:
                        logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        logging.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: 1")
        return 1  # –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def assess_user_level(self, state: LearningState) -> LearningState:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –õ–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ start_learning_session
            return state
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return state
    
    async def generate_question(self, state: LearningState) -> LearningState:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM."""
        try:
            difficulty = state["current_difficulty"]
            focus_topics = state["focus_topics"]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            context = await self.get_context_for_difficulty(difficulty, focus_topics)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LLM
            question_data = await self.generate_question_with_llm(difficulty, context, focus_topics)
            
            if question_data:
                state["current_question"] = question_data
                logging.info(f"‚ùì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {state['user_id']}")
            
            return state
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return state
    
    async def get_context_for_difficulty(self, difficulty: int, focus_topics: List[str]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
        try:
            if not self.knowledge_base:
                return "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∏—Å–∫–∞—Ö –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞."
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            if difficulty == 1:
                query = "–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è"
            elif difficulty == 2:
                query = "—Ç–∏–ø—ã —É–≥—Ä–æ–∑ —Ä–∏—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"
            elif difficulty == 3:
                query = "–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥—ã"
            elif difficulty == 4:
                query = "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å"
            else:  # 5
                query = "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–∞–µ–Ω—Å —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã —Ñ–æ–∫—É—Å–∞
            if focus_topics:
                topics_str = " ".join(focus_topics)
                query += f" {topics_str}"
            
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            docs = await self.knowledge_base.search(query, limit=3)
            
            if docs:
                context = "\n\n".join([doc.page_content for doc in docs])
                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query[:50]}...")
                return context
            else:
                return "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∏—Å–∫–∞—Ö –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞."
                
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∏—Å–∫–∞—Ö –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞."
    
    async def generate_question_with_llm(
        self, 
        difficulty: int, 
        context: str, 
        focus_topics: List[str]
    ) -> Optional[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM."""
        try:
            if not self.llm:
                return await self.generate_fallback_question(difficulty)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
            prompt = self.create_question_prompt(difficulty, context, focus_topics)
            
            # –í—ã–∑—ã–≤–∞–µ–º LLM
            response = await self.llm.ainvoke([HumanMessage(content=prompt)])
            response_text = response.content.strip()
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            question_data = self.parse_llm_response(response_text, difficulty)
            
            if question_data and self.validate_question(question_data):
                return question_data
            else:
                logging.warning("‚ö†Ô∏è LLM —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self.generate_fallback_question(difficulty)
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LLM: {e}")
            return await self.generate_fallback_question(difficulty)
    
    def create_question_prompt(self, difficulty: int, context: str, focus_topics: List[str]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."""
        topics_str = ", ".join(focus_topics)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
        import random
        variation_seed = random.randint(1000, 9999)
        
        return f"""
–°–æ–∑–¥–∞–π –ù–û–í–´–ô –∏ –£–ù–ò–ö–ê–õ–¨–ù–´–ô –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞.

–í–ê–ñ–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Ä–∞–∑ –†–ê–ó–ù–´–ï –≤–æ–ø—Ä–æ—Å—ã! –í–∞—Ä–∏–∞–Ω—Ç #{variation_seed}

–ü–ê–†–ê–ú–ï–¢–†–´:
- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty}/5
- –¢–µ–º—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞: {topics_str}
- –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä (4 –≤–∞—Ä–∏–∞–Ω—Ç–∞)

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–õ–û–ñ–ù–û–°–¢–ò:
–£—Ä–æ–≤–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (RTO, MTPD)
–£—Ä–æ–≤–µ–Ω—å 2: –¢–∏–ø—ã —É–≥—Ä–æ–∑, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤
–£—Ä–æ–≤–µ–Ω—å 3: –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ü–µ–Ω–∫–∏, –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
–£—Ä–æ–≤–µ–Ω—å 4: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
–£—Ä–æ–≤–µ–Ω—å 5: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

–ö–û–ù–¢–ï–ö–°–¢:
{context[:1000]}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {difficulty}
2. –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
3. 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
4. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—É—á–∞—é—â–∏–º, –ù–ï –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∫ –æ—Ç–≤–µ—Ç—É
5. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∞ –Ω–µ –ø–∞–º—è—Ç—å

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
    "question": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
    "options": ["–í–∞—Ä–∏–∞–Ω—Ç A", "–í–∞—Ä–∏–∞–Ω—Ç B", "–í–∞—Ä–∏–∞–Ω—Ç C", "–í–∞—Ä–∏–∞–Ω—Ç D"],
    "correct_answer": 0,
    "explanation": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
    "difficulty": {difficulty},
    "topic": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"
}}

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
    
    def parse_llm_response(self, response_text: str, difficulty: int) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM."""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}') + 1
            
            if start_idx != -1 and end_idx != -1:
                json_str = response_text[start_idx:end_idx]
                question_data = json.loads(json_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ["question", "options", "correct_answer", "explanation"]
                if all(field in question_data for field in required_fields):
                    question_data["difficulty"] = difficulty
                    return question_data
            
            return None
            
        except json.JSONDecodeError as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
            return None
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
            return None
    
    def validate_question(self, question_data: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not question_data.get("question") or len(question_data["question"]) < 10:
                return False
            
            options = question_data.get("options", [])
            if len(options) != 4:
                return False
            
            correct_answer = question_data.get("correct_answer")
            if not isinstance(correct_answer, int) or correct_answer < 0 or correct_answer >= 4:
                return False
            
            if not question_data.get("explanation") or len(question_data["explanation"]) < 10:
                return False
            
            return True
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return False
    
    async def generate_fallback_question(self, difficulty: int) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ LLM."""
        fallback_questions = {
            1: [
                {
                    "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ RTO –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?",
                    "options": [
                        "–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
                        "–†–∏—Å–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", 
                        "–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞",
                        "–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"
                    ],
                    "correct_answer": 0,
                    "explanation": "RTO (Recovery Time Objective) - —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.",
                    "topic": "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã"
                },
                {
                    "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ MTPD –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?",
                    "options": [
                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å—Ç–æ—è",
                        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–º–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                        "–ú–µ—Ç–æ–¥—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
                    ],
                    "correct_answer": 0,
                    "explanation": "MTPD (Maximum Tolerable Period of Disruption) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.",
                    "topic": "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã"
                }
            ],
            2: [
                {
                    "question": "–ö–∞–∫–∏–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–∞–º?",
                    "options": [
                        "–ó–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è –∏ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è",
                        "–ü–æ–∂–∞—Ä—ã –∏ –∞–≤–∞—Ä–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã",
                        "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–∫–∏"
                    ],
                    "correct_answer": 1,
                    "explanation": "–¢–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã - —ç—Ç–æ —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —á–µ–ª–æ–≤–µ–∫–∞, –≤–∫–ª—é—á–∞—è –ø–æ–∂–∞—Ä—ã, –∞–≤–∞—Ä–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã.",
                    "topic": "–¢–∏–ø—ã —É–≥—Ä–æ–∑"
                },
                {
                    "question": "–ö –∫–∞–∫–æ–º—É —Ç–∏–ø—É —É–≥—Ä–æ–∑ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∑–∞–±–∞—Å—Ç–æ–≤–∫–∏ –∏ –±–µ—Å–ø–æ—Ä—è–¥–∫–∏?",
                    "options": [
                        "–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ",
                        "–¢–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ",
                        "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ",
                        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ"
                    ],
                    "correct_answer": 2,
                    "explanation": "–ó–∞–±–∞—Å—Ç–æ–≤–∫–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —É–≥—Ä–æ–∑–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∫–∞.",
                    "topic": "–¢–∏–ø—ã —É–≥—Ä–æ–∑"
                }
            ],
            3: [
                {
                    "question": "–ü—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å (BIA) –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç:",
                    "options": [
                        "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã",
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏",
                        "–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç"
                    ],
                    "correct_answer": 1,
                    "explanation": "–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤—ã—è–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –±–µ–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±–∞–Ω–∫ –Ω–µ –º–æ–∂–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.",
                    "topic": "–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"
                },
                {
                    "question": "–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞?",
                    "options": [
                        "–¢–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ—Ç–µ—Ä—å",
                        "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤",
                        "–¢–æ–ª—å–∫–æ –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –∑–∞—â–∏—Ç—ã",
                        "–¢–æ–ª—å–∫–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"
                    ],
                    "correct_answer": 1,
                    "explanation": "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∏ —ç—Ç–∞–ø–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —É–≥—Ä–æ–∑, –∞–Ω–∞–ª–∏–∑ –∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ü–µ–Ω–∫—É —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞.",
                    "topic": "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"
                }
            ],
            4: [
                {
                    "question": "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –ø–ª–∞–Ω–æ–≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞:",
                    "options": [
                        "–ü–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤",
                        "–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                        "–ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏",
                        "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —à—Ç–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
                    ],
                    "correct_answer": 1,
                    "explanation": "–ü–ª–∞–Ω—ã –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ—Å–ª–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.",
                    "topic": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏"
                }
            ],
            5: [
                {
                    "question": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ä—è–≤–ª—è–µ—Ç –ë–∞–Ω–∫ –†–æ—Å—Å–∏–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏?",
                    "options": [
                        "–¢–æ–ª—å–∫–æ –≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤",
                        "–ö–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ —Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é",
                        "–¢–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –æ—Ç –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤",
                        "–¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                    ],
                    "correct_answer": 1,
                    "explanation": "–ë–∞–Ω–∫ –†–æ—Å—Å–∏–∏ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏ —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏ –≤—ã—è–≤–ª–µ–Ω–∏—è, –æ—Ü–µ–Ω–∫–∏, –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.",
                    "topic": "–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
                }
            ]
        }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —É—Ä–æ–≤–Ω—è
        questions_for_level = fallback_questions.get(difficulty, fallback_questions[1])
        import random
        question = random.choice(questions_for_level).copy()
        question["difficulty"] = difficulty
        
        logging.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è {difficulty}")
        return question
    
    async def generate_simple_question(
        self, 
        user_id: int, 
        difficulty: int, 
        focus_topics: List[str]
    ) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ LangGraph."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await self.get_context_for_difficulty(difficulty, focus_topics)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
            if self.llm:
                question_data = await self.generate_question_with_llm(difficulty, context, focus_topics)
            else:
                question_data = await self.generate_fallback_question(difficulty)
            
            if question_data:
                return {
                    "success": True,
                    "generated_question": question_data,
                    "difficulty": difficulty,
                    "focus_topics": focus_topics
                }
            else:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"}
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return {"error": str(e)}
    
    async def process_answer(self, state: LearningState) -> LearningState:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ lesson_handler
        return state
    
    async def adapt_difficulty(self, state: LearningState) -> LearningState:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞."""
        # –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –≤ ProgressService
        return state
    
    async def check_session_completion(self, state: LearningState) -> LearningState:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
        if state["question_count"] >= self.questions_per_session:
            state["session_active"] = False
        return state
    
    def should_continue(self, state: LearningState) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
        return "continue" if state["session_active"] else "end"