"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta

try:
    from sqlalchemy import select, func, and_, desc, Integer
    from sqlalchemy.orm import selectinload
    from database.database import db_manager
    from database.models import UserProgress, QuestionAttempt, LearningSession, Lesson, Topic, User
    DATABASE_AVAILABLE = True
except ImportError:
    logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è progress_service")
    DATABASE_AVAILABLE = False

from config.settings import DifficultyConfig


class ProgressService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º."""
    
    def __init__(self):
        self.min_level = 1
        self.max_level = 5
        self.questions_per_level_check = 3
    
    async def calculate_next_difficulty(
        self, 
        user_id: int, 
        current_answer_correct: bool,
        current_difficulty: int,
        session_id: int = None
    ) -> tuple[int, str]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            if not DATABASE_AVAILABLE:
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –ë–î
                if current_answer_correct:
                    new_level = min(current_difficulty + 1, self.max_level)
                    reason = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–≤—ã—à–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å"
                else:
                    new_level = max(current_difficulty - 1, self.min_level)
                    reason = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–Ω–∏–∂–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å"
                
                return new_level, reason
            
            async with db_manager.get_session() as session:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—â–µ–º –ø–æ telegram_id
                user_result = await session.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                user = user_result.scalar_one_or_none()
                
                if not user:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
                    return current_difficulty, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                recent_attempts = await session.execute(
                    select(QuestionAttempt)
                    .where(
                        QuestionAttempt.user_id == user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
                        QuestionAttempt.session_id == session_id
                    )
                    .order_by(desc(QuestionAttempt.created_at))
                    .limit(self.questions_per_level_check)
                )
                
                attempts = recent_attempts.scalars().all()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
                if current_answer_correct:
                    if current_difficulty < self.max_level:
                        new_level = current_difficulty + 1
                        reason = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–≤—ã—à–∞–µ–º —Å {current_difficulty} –¥–æ {new_level}"
                    else:
                        new_level = current_difficulty
                        reason = f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å {current_difficulty}"
                else:
                    if current_difficulty > self.min_level:
                        new_level = current_difficulty - 1
                        reason = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–Ω–∏–∂–∞–µ–º —Å {current_difficulty} –¥–æ {new_level}"
                    else:
                        new_level = current_difficulty
                        reason = f"üìö –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å {current_difficulty}"
                
                return new_level, reason
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            return current_difficulty, "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å"
    
    def _adapt_difficulty_by_performance(
        self, 
        current_level: int, 
        accuracy: float, 
        attempts_count: int,
        last_answer_correct: bool
    ) -> tuple[int, str]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        
        # –ï—Å–ª–∏ –º–∞–ª–æ –ø–æ–ø—ã—Ç–æ–∫, –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
        if attempts_count < self.questions_per_level_check:
            if last_answer_correct and current_level < self.max_level:
                return current_level + 1, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–≤—ã—à–∞–µ–º —Å {current_level} –¥–æ {current_level + 1}"
            elif not last_answer_correct and current_level > self.min_level:
                return current_level - 1, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–Ω–∏–∂–∞–µ–º —Å {current_level} –¥–æ {current_level - 1}"
            else:
                return current_level, "–ì—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã"
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if accuracy >= 0.8:  # 80%+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if current_level < self.max_level:
                new_level = min(current_level + 1, self.max_level)
                return new_level, f"üöÄ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ({accuracy:.1%}) - –ø–æ–≤—ã—à–∞–µ–º –¥–æ —É—Ä–æ–≤–Ω—è {new_level}"
            else:
                return current_level, f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å! –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}"
                
        elif accuracy <= 0.4:  # 40% –∏ –º–µ–Ω–µ–µ
            if current_level > self.min_level:
                new_level = max(current_level - 1, self.min_level)
                return new_level, f"üìâ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ({accuracy:.1%}) - –ø–æ–Ω–∏–∂–∞–µ–º –¥–æ —É—Ä–æ–≤–Ω—è {new_level}"
            else:
                return current_level, f"üìö –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}"
                
        else:  # 40-80% - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            return current_level, f"üìä –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ {current_level}. –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}"
    
    async def update_user_difficulty_level(self, user_id: int, new_level: int, reason: str = "") -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if not DATABASE_AVAILABLE:
                logging.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {new_level} ({reason})")
                return True
            
            async with db_manager.get_session() as session:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—â–µ–º –ø–æ telegram_id, –∞ –Ω–µ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É id
                user_result = await session.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                user = user_result.scalar_one_or_none()
                
                if user:
                    old_level = user.current_difficulty_level
                    user.current_difficulty_level = new_level
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    await session.commit()
                    await session.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
                    
                    logging.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —É—Ä–æ–≤–µ–Ω—å {old_level} ‚Üí {new_level} ({reason})")
                    return True
                else:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
        return False
    
    async def get_adaptive_feedback(
        self, 
        is_correct: bool, 
        old_level: int, 
        new_level: int,
        explanation: str = "",
        correct_answer: str = ""
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        
        if is_correct:
            if new_level > old_level:
                feedback = f"""
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!

üöÄ <b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω:</b> {old_level} ‚Üí {new_level}

üí™ –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ.
                """
            else:
                feedback = f"""
‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>

üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {old_level} (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å)

üëç –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!
                """
        else:
            if new_level < old_level:
                feedback = f"""
‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>

üìâ <b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω:</b> {old_level} ‚Üí {new_level}

üí° <b>–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å!</b> –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–æ—â–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.
                """
            else:
                feedback = f"""
‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>

üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {old_level} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ - –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!
                """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if not is_correct and correct_answer:
            feedback += f"\n\nüéØ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {correct_answer}"
        
        if explanation:
            feedback += f"\n\nüí° <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</b> {explanation}"
        
        return feedback
    
    async def get_personalized_question_params(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."""
        try:
            if not DATABASE_AVAILABLE:
                return {"difficulty": 1, "focus_topics": ["basic_concepts"]}
            
            async with db_manager.get_session() as session:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                user_result = await session.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                user = user_result.scalar_one_or_none()
                
                if not user:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                    return {"difficulty": 1, "focus_topics": ["basic_concepts"]}
                
                current_level = user.current_difficulty_level
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—ã –¥–ª—è —É—Ä–æ–≤–Ω—è
                focus_topics = self._get_topics_for_level(current_level)
                
                logging.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —É—Ä–æ–≤–µ–Ω—å {current_level}, —Ç–µ–º—ã {focus_topics}")
                
                return {
                    "difficulty": current_level,
                    "focus_topics": focus_topics,
                    "question_type": self._get_question_type_for_level(current_level)
                }
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {"difficulty": 1, "focus_topics": ["basic_concepts"]}
    
    def _get_topics_for_level(self, level: int) -> list[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
        level_topics = {
            1: ["basic_concepts", "definitions"],
            2: ["risk_identification", "threat_types"],
            3: ["risk_assessment", "impact_analysis"], 
            4: ["mitigation_strategies", "business_continuity"],
            5: ["advanced_planning", "regulatory_compliance"]
        }
        return level_topics.get(level, ["basic_concepts"])
    
    def _get_question_type_for_level(self, level: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è."""
        if level <= 2:
            return "multiple_choice"
        elif level <= 4:
            return "multiple_choice_complex"
        else:
            return "scenario_based"
    
    async def get_user_overall_progress(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if not DATABASE_AVAILABLE:
                return {
                    "error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "completion_percentage": 0,
                    "completed_lessons": 0,
                    "total_lessons": 0,
                    "current_level": 1,
                    "level_name": "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                    "study_time_minutes": 0,
                    "study_time_hours": 0,
                    "total_attempts": 0,
                    "correct_attempts": 0,
                    "accuracy_percentage": 0
                }
            
            async with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_result = await session.execute(
                    select(User).where(User.id == user_id)
                )
                user = user_result.scalar_one_or_none()
                
                if not user:
                    return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
                total_lessons_result = await session.execute(
                    select(func.count(Lesson.id)).where(Lesson.is_active == True)
                )
                total_lessons = total_lessons_result.scalar() or 0
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
                completed_lessons_result = await session.execute(
                    select(func.count(UserProgress.id))
                    .where(
                        UserProgress.user_id == user_id,
                        UserProgress.status == "completed"
                    )
                )
                completed_lessons = completed_lessons_result.scalar() or 0
                
                # –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                completion_percentage = (completed_lessons / total_lessons * 100) if total_lessons > 0 else 0
                
                # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                current_level = user.current_difficulty_level
                level_name = DifficultyConfig.LEVEL_NAMES.get(current_level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                # –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
                study_time_result = await session.execute(
                    select(func.sum(UserProgress.time_spent_minutes))
                    .where(UserProgress.user_id == user_id)
                )
                total_study_time = study_time_result.scalar() or 0
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
                attempts_result = await session.execute(
                    select(
                        func.count(QuestionAttempt.id).label('total'),
                        func.sum(func.cast(QuestionAttempt.is_correct, Integer)).label('correct')
                    )
                    .where(QuestionAttempt.user_id == user_id)
                )
                attempts_stats = attempts_result.first()
                
                total_attempts = attempts_stats.total or 0
                correct_attempts = attempts_stats.correct or 0
                accuracy = (correct_attempts / total_attempts * 100) if total_attempts > 0 else 0
                
                return {
                    "user_id": user_id,
                    "completion_percentage": round(completion_percentage, 1),
                    "completed_lessons": completed_lessons,
                    "total_lessons": total_lessons,
                    "current_level": current_level,
                    "level_name": level_name,
                    "study_time_minutes": total_study_time,
                    "study_time_hours": round(total_study_time / 60, 1),
                    "total_attempts": total_attempts,
                    "correct_attempts": correct_attempts,
                    "accuracy_percentage": round(accuracy, 1),
                    "last_activity": user.last_activity
                }
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return {"error": str(e)}
    
    async def get_detailed_progress(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–º–∞–º –∏ —É—Ä–æ–∫–∞–º."""
        try:
            if not DATABASE_AVAILABLE:
                return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            overall_progress = await self.get_user_overall_progress(user_id)
            
            return {
                "overall": overall_progress,
                "topics": []  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            }
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return {"error": str(e)}
    
    async def update_lesson_progress(
        self, 
        user_id: int, 
        lesson_id: int,
        completion_percentage: float = None,
        mastery_level: float = None,
        time_spent: int = None,
        status: str = None
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —É—Ä–æ–∫—É."""
        try:
            if not DATABASE_AVAILABLE:
                logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                return False
                
            async with db_manager.get_session() as session:
                # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_result = await session.execute(
                    select(UserProgress)
                    .where(
                        UserProgress.user_id == user_id,
                        UserProgress.lesson_id == lesson_id
                    )
                )
                progress = progress_result.scalar_one_or_none()
                
                now = datetime.utcnow()
                
                if progress:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    if completion_percentage is not None:
                        progress.completion_percentage = completion_percentage
                    if mastery_level is not None:
                        progress.mastery_level = mastery_level
                    if time_spent is not None:
                        progress.time_spent_minutes += time_spent
                    if status is not None:
                        progress.status = status
                        if status == "completed":
                            progress.completed_at = now
                    
                    progress.last_attempt_at = now
                else:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    progress = UserProgress(
                        user_id=user_id,
                        lesson_id=lesson_id,
                        status=status or "in_progress",
                        completion_percentage=completion_percentage or 0,
                        mastery_level=mastery_level or 0,
                        time_spent_minutes=time_spent or 0,
                        first_attempt_at=now,
                        last_attempt_at=now
                    )
                    
                    if status == "completed":
                        progress.completed_at = now
                    
                    session.add(progress)
                
                await session.commit()
                
                logging.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ {lesson_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞: {e}")
            return False
    
    async def record_question_attempt(
        self,
        user_id: int,
        question_id: int,
        user_answer: str,
        is_correct: bool,
        time_spent: int = None,
        session_id: int = None
    ) -> bool:
        """–ó–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
        try:
            if not DATABASE_AVAILABLE:
                logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏")
                return False
                
            async with db_manager.get_session() as session:
                attempt = QuestionAttempt(
                    user_id=user_id,
                    question_id=question_id,
                    session_id=session_id,
                    user_answer=user_answer,
                    is_correct=is_correct,
                    time_spent_seconds=time_spent
                )
                
                session.add(attempt)
                await session.commit()
                
                logging.info(f"üìù –ó–∞–ø–∏—Å–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return False
    
    async def get_learning_analytics(self, user_id: int, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        try:
            if not DATABASE_AVAILABLE:
                return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
                
            return {
                "period_days": days,
                "daily_activity": [],
                "difficulty_progress": {},
                "study_time": []
            }
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
    
    async def get_achievements(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if not DATABASE_AVAILABLE:
                return []
                
            # –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ –ë–î
            achievements = [
                {
                    "id": "first_question",
                    "title": "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                    "description": "–ó–∞–¥–∞–Ω –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É",
                    "icon": "‚ùì",
                    "earned_at": datetime.utcnow()
                }
            ]
            
            return achievements
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            return []
    
    async def get_leaderboard(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤."""
        try:
            if not DATABASE_AVAILABLE:
                return []
                
            return []
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
            return []
    
    async def export_user_progress(self, user_id: int) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            overall_progress = await self.get_user_overall_progress(user_id)
            detailed_progress = await self.get_detailed_progress(user_id)
            analytics = await self.get_learning_analytics(user_id, 30)
            achievements = await self.get_achievements(user_id)
            
            return {
                "export_date": datetime.utcnow().isoformat(),
                "user_id": user_id,
                "overall_progress": overall_progress,
                "detailed_progress": detailed_progress,
                "analytics": analytics,
                "achievements": achievements
            }
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return {"error": str(e)}