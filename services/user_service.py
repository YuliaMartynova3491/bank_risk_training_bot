"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ AI-–∞–≥–µ–Ω—Ç–∞.
"""

import logging
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta

from sqlalchemy import select, update, func
from sqlalchemy.orm import selectinload

from database.database import db_manager
from database.models import User, LearningSession, UserProgress, ChatMessage, SystemNotification
from config.settings import DifficultyConfig


class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    
    async def get_user_by_telegram_id(self, telegram_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID."""
        try:
            async with db_manager.get_session() as session:
                result = await session.execute(
                    select(User).where(User.telegram_id == telegram_id)
                )
                return result.scalar_one_or_none()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None
    
    async def create_or_update_user(
        self, 
        telegram_id: int, 
        username: str = None,
        first_name: str = None, 
        last_name: str = None
    ) -> User:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            async with db_manager.get_session() as session:
                # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await session.execute(
                    select(User).where(User.telegram_id == telegram_id)
                )
                user = result.scalar_one_or_none()
                
                if user:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.username = username
                    user.first_name = first_name
                    user.last_name = last_name
                    user.last_activity = datetime.utcnow()
                else:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = User(
                        telegram_id=telegram_id,
                        username=username,
                        first_name=first_name,
                        last_name=last_name,
                        current_difficulty_level=1,
                        preferred_language="ru",
                        notifications_enabled=True
                    )
                    session.add(user)
                
                await session.commit()
                await session.refresh(user)
                
                logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} {'–æ–±–Ω–æ–≤–ª–µ–Ω' if result.scalar_one_or_none() else '—Å–æ–∑–¥–∞–Ω'}")
                return user
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise
    
    async def update_difficulty_level(self, telegram_id: int, difficulty_level: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if difficulty_level < 1 or difficulty_level > 5:
                logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty_level}")
                return False
            
            async with db_manager.get_session() as session:
                result = await session.execute(
                    update(User)
                    .where(User.telegram_id == telegram_id)
                    .values(
                        current_difficulty_level=difficulty_level,
                        updated_at=datetime.utcnow()
                    )
                )
                
                await session.commit()
                
                if result.rowcount > 0:
                    logging.info(f"üéØ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {difficulty_level}")
                    return True
                else:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                    
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def update_notification_settings(self, telegram_id: int, enabled: bool) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            async with db_manager.get_session() as session:
                result = await session.execute(
                    update(User)
                    .where(User.telegram_id == telegram_id)
                    .values(
                        notifications_enabled=enabled,
                        updated_at=datetime.utcnow()
                    )
                )
                
                await session.commit()
                
                if result.rowcount > 0:
                    status = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                    logging.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} {status}")
                    return True
                else:
                    return False
                    
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def update_last_activity(self, telegram_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        try:
            async with db_manager.get_session() as session:
                result = await session.execute(
                    update(User)
                    .where(User.telegram_id == telegram_id)
                    .values(last_activity=datetime.utcnow())
                )
                
                await session.commit()
                return result.rowcount > 0
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def get_user_sessions(self, user_id: int, limit: int = 10) -> List[LearningSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            async with db_manager.get_session() as session:
                result = await session.execute(
                    select(LearningSession)
                    .where(LearningSession.user_id == user_id)
                    .order_by(LearningSession.started_at.desc())
                    .limit(limit)
                    .options(
                        selectinload(LearningSession.current_topic),
                        selectinload(LearningSession.current_lesson)
                    )
                )
                return result.scalars().all()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []
    
    async def get_active_session(self, user_id: int) -> Optional[LearningSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            async with db_manager.get_session() as session:
                result = await session.execute(
                    select(LearningSession)
                    .where(
                        LearningSession.user_id == user_id,
                        LearningSession.session_state == "active"
                    )
                    .order_by(LearningSession.started_at.desc())
                )
                return result.scalar_one_or_none()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    async def create_learning_session(self, user_id: int, topic_id: int = None) -> LearningSession:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            async with db_manager.get_session() as session:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
                await session.execute(
                    update(LearningSession)
                    .where(
                        LearningSession.user_id == user_id,
                        LearningSession.session_state == "active"
                    )
                    .values(session_state="paused")
                )
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                new_session = LearningSession(
                    user_id=user_id,
                    current_topic_id=topic_id,
                    session_state="active",
                    agent_state={}
                )
                
                session.add(new_session)
                await session.commit()
                await session.refresh(new_session)
                
                logging.info(f"üìö –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return new_session
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
            raise
    
    async def update_session_state(self, session_id: int, state: str, agent_state: Dict = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
        try:
            async with db_manager.get_session() as session:
                update_values = {
                    "session_state": state,
                    "last_activity_at": datetime.utcnow()
                }
                
                if agent_state is not None:
                    update_values["agent_state"] = agent_state
                
                if state == "completed":
                    update_values["completed_at"] = datetime.utcnow()
                
                result = await session.execute(
                    update(LearningSession)
                    .where(LearningSession.id == session_id)
                    .values(**update_values)
                )
                
                await session.commit()
                return result.rowcount > 0
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def get_user_chat_history(self, user_id: int, limit: int = 20) -> List[ChatMessage]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å AI."""
        try:
            async with db_manager.get_session() as session:
                result = await session.execute(
                    select(ChatMessage)
                    .where(ChatMessage.user_id == user_id)
                    .order_by(ChatMessage.created_at.desc())
                    .limit(limit)
                )
                return result.scalars().all()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
            return []
    
    async def save_chat_message(
        self, 
        user_id: int, 
        message_type: str, 
        content: str,
        context_used: List[Dict] = None,
        confidence_score: float = None
    ) -> ChatMessage:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
        try:
            async with db_manager.get_session() as session:
                chat_message = ChatMessage(
                    user_id=user_id,
                    message_type=message_type,
                    content=content,
                    context_used=context_used or [],
                    confidence_score=confidence_score,
                    metadata={"timestamp": datetime.utcnow().isoformat()}
                )
                
                session.add(chat_message)
                await session.commit()
                await session.refresh(chat_message)
                
                return chat_message
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
    
    async def get_users_for_notifications(self, inactive_hours: int = 8) -> List[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        try:
            cutoff_time = datetime.utcnow() - timedelta(hours=inactive_hours)
            
            async with db_manager.get_session() as session:
                result = await session.execute(
                    select(User)
                    .where(
                        User.notifications_enabled == True,
                        User.last_activity < cutoff_time
                    )
                    .join(LearningSession, User.id == LearningSession.user_id)
                    .where(LearningSession.session_state.in_(["active", "paused"]))
                )
                return result.scalars().unique().all()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def create_notification(
        self, 
        user_id: int, 
        notification_type: str,
        title: str, 
        message: str,
        scheduled_for: datetime = None
    ) -> SystemNotification:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        try:
            async with db_manager.get_session() as session:
                notification = SystemNotification(
                    user_id=user_id,
                    notification_type=notification_type,
                    title=title,
                    message=message,
                    scheduled_for=scheduled_for or datetime.utcnow()
                )
                
                session.add(notification)
                await session.commit()
                await session.refresh(notification)
                
                return notification
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            raise
    
    async def get_user_statistics(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            async with db_manager.get_session() as session:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
                sessions_result = await session.execute(
                    select(func.count(LearningSession.id))
                    .where(LearningSession.user_id == user_id)
                )
                total_sessions = sessions_result.scalar() or 0
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                completed_sessions_result = await session.execute(
                    select(func.count(LearningSession.id))
                    .where(
                        LearningSession.user_id == user_id,
                        LearningSession.session_state == "completed"
                    )
                )
                completed_sessions = completed_sessions_result.scalar() or 0
                
                # –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (—Å—É–º–º–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–π)
                time_result = await session.execute(
                    select(func.sum(
                        func.extract('epoch', LearningSession.last_activity_at - LearningSession.started_at) / 3600
                    ))
                    .where(LearningSession.user_id == user_id)
                )
                study_hours = time_result.scalar() or 0
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
                messages_result = await session.execute(
                    select(func.count(ChatMessage.id))
                    .where(ChatMessage.user_id == user_id)
                )
                chat_messages = messages_result.scalar() or 0
                
                return {
                    "total_sessions": total_sessions,
                    "completed_sessions": completed_sessions,
                    "completion_rate": (completed_sessions / total_sessions * 100) if total_sessions > 0 else 0,
                    "study_hours": round(float(study_hours), 2),
                    "chat_messages": chat_messages
                }
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}
    
    async def delete_user_data(self, telegram_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (GDPR)."""
        try:
            async with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_result = await session.execute(
                    select(User).where(User.telegram_id == telegram_id)
                )
                user = user_result.scalar_one_or_none()
                
                if not user:
                    return False
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                # –±–ª–∞–≥–æ–¥–∞—Ä—è cascade="all, delete-orphan" –≤ –º–æ–¥–µ–ª—è—Ö
                await session.delete(user)
                await session.commit()
                
                logging.info(f"üóëÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É–¥–∞–ª–µ–Ω—ã")
                return True
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False