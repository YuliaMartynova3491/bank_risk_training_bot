"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ä–æ–∫–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–∞.
"""

import logging
import random
import asyncio
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from bot.keyboards.main_menu import get_main_menu_keyboard
from config.settings import Stickers

try:
    from database.database import get_user_by_telegram_id, db_manager
    from services.user_service import UserService
    from services.progress_service import ProgressService
    DATABASE_AVAILABLE = True
except ImportError:
    logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è lesson_handler")
    DATABASE_AVAILABLE = False


async def handle_start_learning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
        context.user_data['questions_answered'] = 0
        context.user_data['correct_answers'] = 0
        
        await show_theory(update, context)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await query.edit_message_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=get_main_menu_keyboard()
        )


async def show_theory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_level = 1
    if DATABASE_AVAILABLE:
        try:
            user = await get_user_by_telegram_id(update.effective_user.id)
            if user:
                user_level = user.current_difficulty_level
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–æ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    theory_text = generate_theory_for_level(user_level)
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, –∫ –≤–æ–ø—Ä–æ—Å–∞–º!", callback_data="start_questions")],
        [InlineKeyboardButton("üìñ –ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å", callback_data="start_learning")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        text=theory_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


async def show_theory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π AI –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_level = 1
    user_progress = None
    
    if DATABASE_AVAILABLE:
        try:
            user = await get_user_by_telegram_id(update.effective_user.id)
            if user:
                user_level = user.current_difficulty_level
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                progress_service = ProgressService()
                user_progress = await get_user_progress_for_theory(user.id)
                
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏
    await update.callback_query.edit_message_text(
        "ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π...</b>\n\n‚è≥ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...",
        parse_mode='HTML'
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–æ—Ä–∏—é —á–µ—Ä–µ–∑ AI
    theory_text = await generate_theory_with_ai(update, context, user_level, user_progress)
    
    if not theory_text:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—É—é —Ç–µ–æ—Ä–∏—é –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        theory_text = generate_fallback_theory_for_level(user_level)
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, –∫ –≤–æ–ø—Ä–æ—Å–∞–º!", callback_data="start_questions")],
        [InlineKeyboardButton("üìñ –ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å", callback_data="start_learning")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        text=theory_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


async def get_user_progress_for_theory(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏."""
    try:
        if not DATABASE_AVAILABLE:
            return {}
        
        async with db_manager.get_session() as session:
            from database.models import QuestionAttempt
            from sqlalchemy import select, func, desc
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
            recent_attempts = await session.execute(
                select(QuestionAttempt)
                .where(QuestionAttempt.user_id == user_id)
                .order_by(desc(QuestionAttempt.created_at))
                .limit(10)
            )
            
            attempts = recent_attempts.scalars().all()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
            weak_topics = []
            strong_topics = []
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞
            # –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            
            total_questions = len(attempts)
            correct_answers = sum(1 for attempt in attempts if attempt.is_correct)
            accuracy = (correct_answers / total_questions * 100) if total_questions > 0 else 0
            
            return {
                'total_questions': total_questions,
                'accuracy': accuracy,
                'weak_topics': weak_topics,
                'strong_topics': strong_topics,
                'recent_performance': 'good' if accuracy > 70 else 'needs_improvement'
            }
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ç–µ–æ—Ä–∏–∏: {e}")
        return {}


async def generate_theory_with_ai(update: Update, context: ContextTypes.DEFAULT_TYPE, user_level: int, user_progress: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º AI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        learning_graph = context.application.bot_data.get('learning_graph')
        knowledge_base = context.application.bot_data.get('knowledge_base')
        
        if not learning_graph or not learning_graph.llm:
            logging.warning("‚ö†Ô∏è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        context_query = get_context_query_for_level(user_level)
        context_docs = []
        
        if knowledge_base:
            try:
                docs = await knowledge_base.search(context_query, limit=3)
                context_docs = [doc.page_content for doc in docs] if docs else []
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏
        theory_prompt = create_theory_prompt(user_level, user_progress, context_docs)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–æ—Ä–∏—é —á–µ—Ä–µ–∑ LLM
        from langchain_core.messages import HumanMessage
        response = await learning_graph.llm.ainvoke([HumanMessage(content=theory_prompt)])
        
        if response and response.content:
            theory_text = response.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not theory_text.startswith('üìö'):
                theory_text = f"üìö <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ (—É—Ä–æ–≤–µ–Ω—å {user_level})</b>\n\n{theory_text}"
            
            logging.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è {user_level}")
            return theory_text
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ AI: {e}")
    
    return None


def get_context_query_for_level(level: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–æ—Ä–∏–∏."""
    level_queries = {
        1: "–æ—Å–Ω–æ–≤—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ RTO MTPD –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
        2: "—Ç–∏–ø—ã —É–≥—Ä–æ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∏—Å–∫–∏ —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ",
        3: "–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è BIA –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        4: "—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
        5: "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫ —Ä–æ—Å—Å–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–º–ø–ª–∞–µ–Ω—Å"
    }
    return level_queries.get(level, "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫")


def create_theory_prompt(user_level: int, user_progress: dict, context_docs: list) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–∏–∏."""
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    progress_analysis = ""
    if user_progress:
        accuracy = user_progress.get('accuracy', 0)
        total_questions = user_progress.get('total_questions', 0)
        
        if total_questions > 0:
            if accuracy > 80:
                progress_analysis = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.1f}%). –ú–æ–∂–Ω–æ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."
            elif accuracy > 60:
                progress_analysis = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.1f}%). –ù—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏."
            else:
                progress_analysis = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.1f}%). –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤."
        else:
            progress_analysis = "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Å–Ω–æ–≤."
    else:
        progress_analysis = "–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —É—Ä–æ–≤–Ω—è."
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    context_text = "\n\n".join(context_docs[:2]) if context_docs else "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏."
    
    level_descriptions = {
        1: "–±–∞–∑–æ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (RTO, MTPD, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã)",
        2: "–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —É–≥—Ä–æ–∑ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", 
        3: "–º–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å",
        4: "—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
        5: "—Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"
    }
    
    return f"""
–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è {user_level}.

–ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{progress_analysis}

–£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò: {user_level}/5
–¢–ï–ú–ê –£–†–û–ö–ê: {level_descriptions.get(user_level, "–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")}

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{context_text[:1500]}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –£–†–û–ö–£:
1. –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –£—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
3. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –º–∞—Ç–µ—Ä–∏–∞–ª –ª–æ–≥–∏—á–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
4. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
5. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
6. –û–±—ä–µ–º: 300-500 —Å–ª–æ–≤

–°–¢–†–£–ö–¢–£–†–ê –£–†–û–ö–ê:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º —É—Ä–æ–∫–∞ –∏ —Ç–µ–º–æ–π
- –¶–µ–ª—å —É—Ä–æ–∫–∞
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (2-4 –ø—É–Ω–∫—Ç–∞)
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∫ –∏–∑—É—á–µ–Ω–∏—é

–í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –¥–æ–±–∞–≤—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
- –ï—Å–ª–∏ –Ω–∏–∑–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞—Ö –∏ –ø—Ä–æ—Å—Ç—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>

–°–æ–∑–¥–∞–π –∏–º–µ–Ω–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–∫, –∞ –Ω–µ –æ–±—â—É—é —Ç–µ–æ—Ä–∏—é!
    """


def generate_fallback_theory_for_level(level: int) -> str:
    """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    
    fallback_theories = {
        1: """
üìö <b>–£—Ä–æ–∫ 1: –û—Å–Ω–æ–≤—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏</b>

üéØ <b>–¶–µ–ª—å —É—Ä–æ–∫–∞:</b>
–ò–∑—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞.

üí° <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:</b>

<b>üîπ –†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏</b> - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π, –Ω–∞—Ä—É—à–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –±–∞–Ω–∫–∞.

<b>üîπ RTO</b> - —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.

<b>üîπ MTPD</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å—Ç–æ—è.

‚úÖ –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤?
        """,
        
        2: """
üìö <b>–£—Ä–æ–∫ 2: –¢–∏–ø—ã —É–≥—Ä–æ–∑</b>

üéØ <b>–¶–µ–ª—å —É—Ä–æ–∫–∞:</b>
–ò–∑—É—á–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —É–≥—Ä–æ–∑, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –±–∞–Ω–∫–∞.

üö® <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —É–≥—Ä–æ–∑:</b>

<b>üî• –¢–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ:</b> –ø–æ–∂–∞—Ä—ã, –∞–≤–∞—Ä–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
<b>üå™Ô∏è –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ:</b> —Å—Ç–∏—Ö–∏–π–Ω—ã–µ –±–µ–¥—Å—Ç–≤–∏—è
<b>üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ:</b> –∑–∞–±–∞—Å—Ç–æ–≤–∫–∏, –±–µ—Å–ø–æ—Ä—è–¥–∫–∏

‚úÖ –ì–æ—Ç–æ–≤—ã –∏–∑—É—á–∏—Ç—å —Ç–∏–ø—ã —É–≥—Ä–æ–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?
        """,
        
        3: """
üìö <b>–£—Ä–æ–∫ 3: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤</b>

üéØ <b>–¶–µ–ª—å —É—Ä–æ–∫–∞:</b>
–ò–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.

üìä <b>–≠—Ç–∞–ø—ã –æ—Ü–µ–Ω–∫–∏:</b>

<b>üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> –≤—ã—è–≤–ª–µ–Ω–∏–µ —É–≥—Ä–æ–∑
<b>üìà –ê–Ω–∞–ª–∏–∑:</b> –æ—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
<b>‚öñÔ∏è –û—Ü–µ–Ω–∫–∞:</b> –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é

‚úÖ –ì–æ—Ç–æ–≤—ã –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏?
        """,
        
        4: """
üìö <b>–£—Ä–æ–∫ 4: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>

üéØ <b>–¶–µ–ª—å —É—Ä–æ–∫–∞:</b>
–ò–∑—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.

üõ°Ô∏è <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>

<b>‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ:</b> –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–∏—Å–∫–∞
<b>üîÑ –°–Ω–∏–∂–µ–Ω–∏–µ:</b> –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –º–µ—Ä
<b>üì§ –ü–µ—Ä–µ–¥–∞—á–∞:</b> —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥

‚úÖ –ì–æ—Ç–æ–≤—ã –∏–∑—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?
        """,
        
        5: """
üìö <b>–£—Ä–æ–∫ 5: –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ</b>

üéØ <b>–¶–µ–ª—å —É—Ä–æ–∫–∞:</b>
–ò–∑—É—á–∏—Ç—å —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.

üìú <b>–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:</b>

<b>üèõÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¶–ë:</b> –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
<b>üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã:</b> ISO, Basel
<b>‚ö° –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b> –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

‚úÖ –ì–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–º—É —É—Ä–æ–≤–Ω—é?
        """
    }
    
    return fallback_theories.get(level, fallback_theories[1])


async def handle_start_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ–æ—Ä–∏–∏."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        await query.edit_message_text(
            "ü§ñ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...</b>\n\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å...",
            parse_mode='HTML'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = None
        if DATABASE_AVAILABLE:
            try:
                user = await get_user_by_telegram_id(update.effective_user.id)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = await create_learning_session(user)
        context.user_data['session_id'] = session_id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await generate_and_show_question(update, context, user)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await query.edit_message_text(
            "üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=get_main_menu_keyboard()
        )


async def create_learning_session(user) -> int:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
    if DATABASE_AVAILABLE and user:
        try:
            user_service = UserService()
            session = await user_service.create_learning_session(user.id)
            return session.id if session else None
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é: {e}")
    return None


async def generate_and_show_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user, is_edit: bool = True):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º AI-–∞–≥–µ–Ω—Ç
        learning_graph = context.application.bot_data.get('learning_graph')
        if not learning_graph:
            await update.callback_query.edit_message_text(
                "üòî AI-–∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_telegram_id = update.effective_user.id
        current_difficulty = context.user_data.get('current_difficulty')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
        if not current_difficulty and DATABASE_AVAILABLE:
            try:
                progress_service = ProgressService()
                question_params = await progress_service.get_personalized_question_params(user_telegram_id)
                current_difficulty = question_params.get('difficulty', 1)
                focus_topics = question_params.get('focus_topics', [])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data['current_difficulty'] = current_difficulty
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
                current_difficulty = 1
                focus_topics = ["basic_concepts"]
        else:
            current_difficulty = current_difficulty or 1
            focus_topics = ["basic_concepts"] if current_difficulty <= 2 else ["risk_assessment"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        result = await learning_graph.start_learning_session(
            user_telegram_id, 
            difficulty_override=current_difficulty,
            focus_topics=focus_topics
        )
        
        if "error" in result:
            await update.callback_query.edit_message_text(
                f"üòî –û—à–∏–±–∫–∞: {result['error']}",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        if "generated_question" not in result:
            await update.callback_query.edit_message_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        await show_question(update, context, result["generated_question"], is_edit)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.callback_query.edit_message_text(
            "üòî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def show_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_data: Dict[str, Any], is_edit: bool = True):
    """–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        question_text = question_data.get("question", "")
        options = question_data.get("options", [])
        difficulty = question_data.get("difficulty", 1)
        topic = question_data.get("topic", "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        context.user_data['current_question'] = question_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        message_text = f"""
üéØ <b>–í–æ–ø—Ä–æ—Å (—É—Ä–æ–≤–µ–Ω—å {difficulty}/5)</b>
üìö <i>{topic}</i>

‚ùì <b>{question_text}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for i, option in enumerate(options):
            keyboard.append([
                InlineKeyboardButton(
                    f"{chr(65 + i)}. {option}", 
                    callback_data=f"answer_{i}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.append([
            InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint"),
            InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
        ])
        keyboard.append([
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_edit and update.callback_query:
            await update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞
        answer_index = int(query.data.split('_')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        question_data = context.user_data.get('current_question')
        if not question_data:
            await query.edit_message_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        correct_answer_index = question_data.get("correct_answer", 0)
        is_correct = answer_index == correct_answer_index
        current_difficulty = question_data.get("difficulty", 1)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = None
        if DATABASE_AVAILABLE:
            try:
                user = await get_user_by_telegram_id(update.effective_user.id)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
        sticker = Stickers.FIRST_CORRECT if is_correct else Stickers.FIRST_INCORRECT
        await context.bot.send_sticker(
            chat_id=update.effective_chat.id,
            sticker=sticker
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        feedback = await process_answer_and_get_feedback(
            update, context, is_correct, answer_index, question_data, current_difficulty, user
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        if await check_lesson_completion(update, context, is_correct, feedback):
            return  # –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=feedback,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")


async def process_answer_and_get_feedback(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    is_correct: bool, 
    answer_index: int, 
    question_data: Dict[str, Any], 
    current_difficulty: int,
    user
) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    
    user_telegram_id = update.effective_user.id
    session_id = context.user_data.get('session_id')
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if DATABASE_AVAILABLE:
        try:
            progress_service = ProgressService()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id)
            new_difficulty, reason = await progress_service.calculate_next_difficulty(
                user_id=user_telegram_id,
                current_answer_correct=is_correct,
                current_difficulty=current_difficulty,
                session_id=session_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id)
            await progress_service.update_user_difficulty_level(user_telegram_id, new_difficulty, reason)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            correct_option = ""
            if not is_correct:
                options = question_data.get('options', [])
                correct_answer_index = question_data.get("correct_answer", 0)
                if correct_answer_index < len(options):
                    correct_option = options[correct_answer_index]
            
            explanation = question_data.get('explanation', '')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            feedback = await progress_service.get_adaptive_feedback(
                is_correct=is_correct,
                old_level=current_difficulty,
                new_level=new_difficulty,
                explanation=explanation,
                correct_answer=correct_option
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            context.user_data['current_difficulty'] = new_difficulty
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ø—ã—Ç–æ–∫)
            if user:
                await progress_service.record_question_attempt(
                    user_id=user.id,
                    question_id=None,
                    user_answer=str(answer_index),
                    is_correct=is_correct,
                    session_id=session_id
                )
            
            return feedback
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏: {e}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –±–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if is_correct:
        return f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\nüí° {question_data.get('explanation', '')}"
    else:
        options = question_data.get('options', [])
        correct_answer_index = question_data.get("correct_answer", 0)
        correct_option = options[correct_answer_index] if correct_answer_index < len(options) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        return f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n\nüéØ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {correct_option}\n\nüí° {question_data.get('explanation', '')}"


async def check_lesson_completion(update: Update, context: ContextTypes.DEFAULT_TYPE, is_correct: bool, feedback: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞."""
    
    # –°—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
    questions_answered = context.user_data.get('questions_answered', 0) + 1
    correct_answers = context.user_data.get('correct_answers', 0)
    if is_correct:
        correct_answers += 1
    
    context.user_data['questions_answered'] = questions_answered
    context.user_data['correct_answers'] = correct_answers
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ (4 –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
    if questions_answered >= 4:
        accuracy = correct_answers / questions_answered
        if accuracy >= 0.75:  # 75% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            completion_data = {
                'lesson_passed': True,
                'success_rate': accuracy * 100,
                'questions_answered': questions_answered,
                'correct_answers': correct_answers
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫", callback_data="complete_lesson")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            feedback += f"\n\nüéâ <b>–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\nüìä –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}\n‚úÖ –û—Ç–≤–µ—Ç–æ–≤: {questions_answered}/{correct_answers}"
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=feedback,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            return True
    
    return False


async def handle_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –≤–µ–∑–¥–µ
        user_telegram_id = update.effective_user.id
        session_id = context.user_data.get('session_id')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ò–õ–ò –∏–∑ –ë–î
        current_difficulty = context.user_data.get('current_difficulty')
        
        if DATABASE_AVAILABLE and not current_difficulty:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
            progress_service = ProgressService()
            question_params = await progress_service.get_personalized_question_params(user_telegram_id)
            current_difficulty = question_params.get('difficulty', 1)
            focus_topics = question_params.get('focus_topics', [])
        else:
            current_difficulty = current_difficulty or 1
            focus_topics = ["basic_concepts"] if current_difficulty == 1 else ["risk_assessment"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —É—Ä–æ–≤–Ω–µ
        loading_text = f"""
ü§ñ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...</b>

üìä <b>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</b> {current_difficulty}/5
üéØ <b>–§–æ–∫—É—Å:</b> {', '.join(focus_topics[:2]) if focus_topics else '–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'}

‚è≥ AI –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–¥ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è...
        """
        
        await query.edit_message_text(
            text=loading_text,
            parse_mode='HTML'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        user = None
        if DATABASE_AVAILABLE:
            try:
                user = await get_user_by_telegram_id(user_telegram_id)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX
        await asyncio.sleep(1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        await generate_and_show_question(update, context, user, is_edit=True)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await query.edit_message_text(
            "üòî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def handle_hint(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        question_data = context.user_data.get('current_question')
        if not question_data:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
            return
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞, –∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        explanation = question_data.get('explanation', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        question_text = question_data.get('question', '')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –Ω–æ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        hint_text = ""
        if "RTO" in question_text:
            hint_text = "üí° –ü–æ–¥—É–º–∞–π—Ç–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        elif "MTPD" in question_text:
            hint_text = "üí° –†–µ—á—å –∏–¥–µ—Ç –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –ø–µ—Ä–∏–æ–¥–µ"
        elif "—Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω" in question_text.lower():
            hint_text = "üí° –ü–æ–¥—É–º–∞–π—Ç–µ –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"
        elif "BIA" in question_text or "–≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å" in question_text.lower():
            hint_text = "üí° –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ"
        elif "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç" in question_text.lower():
            hint_text = "üí° –ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É"
        else:
            # –û–±—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            hint_words = explanation.split()[:10]
            hint_text = f"üí° –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è: {' '.join(hint_words)}..."
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>\n\n{hint_text}",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")


async def handle_skip_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    
    try:
        await query.answer("‚è≠Ô∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if DATABASE_AVAILABLE:
            user = await get_user_by_telegram_id(update.effective_user.id)
            if user:
                session_id = context.user_data.get('session_id')
                progress_service = ProgressService()
                await progress_service.record_question_attempt(
                    user_id=user.id,
                    question_id=None,
                    user_answer="skipped",
                    is_correct=False,
                    session_id=session_id
                )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await handle_next_question(update, context)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")


async def handle_complete_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞."""
    query = update.callback_query
    
    try:
        await query.answer("üéâ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        context.user_data['questions_answered'] = 0
        context.user_data['correct_answers'] = 0
        
        completion_text = """
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìö <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –ò–∑—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª  
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–º!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìñ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data="start_learning")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="show_progress")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text=completion_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")


def register_lesson_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ä–æ–∫–æ–≤."""
    application.add_handler(CallbackQueryHandler(handle_start_learning, pattern="^start_learning$"))
    application.add_handler(CallbackQueryHandler(handle_start_questions, pattern="^start_questions$"))
    application.add_handler(CallbackQueryHandler(handle_next_question, pattern="^next_question$"))
    application.add_handler(CallbackQueryHandler(handle_complete_lesson, pattern="^complete_lesson$"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern=r"^answer_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_hint, pattern="^hint$"))
    application.add_handler(CallbackQueryHandler(handle_skip_question, pattern="^skip$"))