"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ä–æ–∫–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–∞.
"""

import logging
import random
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler

from bot.keyboards.main_menu import get_answer_keyboard, get_navigation_keyboard, get_main_menu_keyboard
from config.settings import Stickers
from database.database import get_user_by_telegram_id
from services.user_service import UserService
from services.progress_service import ProgressService


async def handle_start_learning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ AI-–∞–≥–µ–Ω—Ç–∞
        learning_graph = context.application.bot_data.get('learning_graph')
        if not learning_graph:
            await query.edit_message_text(
                "üòî AI-–∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        welcome_sticker = random.choice(Stickers.WELCOME)
        await context.bot.send_sticker(
            chat_id=update.effective_chat.id,
            sticker=welcome_sticker
        )
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        result = await learning_graph.start_learning_session(user.id)
        
        if "error" in result:
            await query.edit_message_text(
                f"üòî –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {result['error']}",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_service = UserService()
        session = await user_service.create_learning_session(user.id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if "generated_question" in result:
            await present_question(update, context, result["generated_question"], session.id)
        else:
            await query.edit_message_text(
                "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\n\n–êI-–∞–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...",
                reply_markup=get_main_menu_keyboard()
            )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await query.edit_message_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )


async def handle_continue_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        user_service = UserService()
        active_session = await user_service.get_active_session(user.id)
        
        if not active_session:
            await query.edit_message_text(
                "üìö –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è.\n\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
        learning_graph = context.application.bot_data.get('learning_graph')
        user_context = learning_graph.get_user_context(user.id) if learning_graph else None
        
        if not user_context:
            await query.edit_message_text(
                "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à—É —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è...",
                reply_markup=get_main_menu_keyboard()
            )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if learning_graph:
            result = await learning_graph.start_learning_session(user.id)
            if "generated_question" in result:
                await present_question(update, context, result["generated_question"], active_session.id)
            else:
                await query.edit_message_text(
                    "üìö –ì–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...",
                    reply_markup=get_main_menu_keyboard()
                )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")


async def present_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_data: dict, session_id: int):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        question_text = question_data.get("question", "")
        options = question_data.get("options", [])
        difficulty = question_data.get("difficulty", 1)
        topic = question_data.get("topic", "")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
        message_text = f"""
üéØ <b>–í–æ–ø—Ä–æ—Å ({difficulty} —É—Ä–æ–≤–µ–Ω—å)</b>
üìö <i>{topic}</i>

‚ùì <b>{question_text}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
        """
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_question'] = question_data
        context.user_data['session_id'] = session_id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞
        temp_question_id = f"temp_{session_id}_{random.randint(1000, 9999)}"
        keyboard = get_answer_keyboard(temp_question_id, options)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        callback_parts = query.data.split('_')
        if len(callback_parts) < 3:
            return
        
        answer_index = int(callback_parts[-1])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        question_data = context.user_data.get('current_question')
        session_id = context.user_data.get('session_id')
        
        if not question_data:
            await query.edit_message_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI-–∞–≥–µ–Ω—Ç–∞
        learning_graph = context.application.bot_data.get('learning_graph')
        if learning_graph:
            result = await learning_graph.process_answer(
                user_id=user.id,
                question_id=0,  # –î–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                answer=str(answer_index)
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏
            is_correct = result.get('is_correct', False)
            feedback = result.get('feedback', '')
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
            if is_correct:
                user_context = learning_graph.get_user_context(user.id)
                if user_context and user_context.consecutive_correct == 1:
                    sticker = Stickers.FIRST_CORRECT
                else:
                    sticker = Stickers.SUBSEQUENT_CORRECT
            else:
                user_context = learning_graph.get_user_context(user.id)
                if user_context and user_context.consecutive_incorrect == 1:
                    sticker = Stickers.FIRST_INCORRECT
                else:
                    sticker = Stickers.SUBSEQUENT_INCORRECT
            
            await context.bot.send_sticker(
                chat_id=update.effective_chat.id,
                sticker=sticker
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
            progress_service = ProgressService()
            await progress_service.record_question_attempt(
                user_id=user.id,
                question_id=None,  # –î–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                user_answer=str(answer_index),
                is_correct=is_correct,
                session_id=session_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await query.edit_message_text(
                text=feedback,
                parse_mode='HTML'
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
            completion_data = result.get('completion_data')
            if completion_data:
                await handle_lesson_completion(update, context, completion_data)
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                await generate_next_question(update, context, user.id, session_id)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")


async def handle_lesson_completion(update: Update, context: ContextTypes.DEFAULT_TYPE, completion_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞."""
    try:
        lesson_passed = completion_data.get('lesson_passed', False)
        success_rate = completion_data.get('success_rate', 0)
        
        if lesson_passed:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await context.bot.send_sticker(
                chat_id=update.effective_chat.id,
                sticker=Stickers.LESSON_COMPLETED
            )
            
            completion_message = f"""
üéâ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ: {completion_data.get('questions_answered', 0)}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {completion_data.get('correct_answers', 0)}

üéØ <b>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</b> {completion_data.get('final_difficulty', 1)}

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?
            """
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await context.bot.send_sticker(
                chat_id=update.effective_chat.id,
                sticker=Stickers.INSUFFICIENT_SCORE
            )
            
            completion_message = f"""
üìö <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>

üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è: 80%+

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑

–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫ –∏–ª–∏ –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª?
            """
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await get_user_by_telegram_id(update.effective_user.id)
        if user:
            progress_service = ProgressService()
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å lesson_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º None
            await progress_service.update_lesson_progress(
                user_id=user.id,
                lesson_id=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                completion_percentage=success_rate,
                status="completed" if lesson_passed else "in_progress"
            )
        
        from bot.keyboards.main_menu import get_learning_menu_keyboard
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=completion_message,
            reply_markup=get_learning_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")


async def generate_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, session_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    try:
        learning_graph = context.application.bot_data.get('learning_graph')
        if not learning_graph:
            return
        
        # –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç AI-–∞–≥–µ–Ω—Ç–∞
        result = await learning_graph.start_learning_session(user_id)
        
        if "generated_question" in result:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            import asyncio
            await asyncio.sleep(2)
            
            await present_question(update, context, result["generated_question"], session_id)
        elif result.get('completion_data'):
            await handle_lesson_completion(update, context, result['completion_data'])
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üìö –ì–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...",
                reply_markup=get_main_menu_keyboard()
            )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")


async def handle_hint(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        question_data = context.user_data.get('current_question')
        if not question_data:
            await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        hint_text = f"""
üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞</b>

{question_data.get('explanation', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑!
        """
        
        await query.answer(hint_text, show_alert=True)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")


async def handle_skip_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            return
        
        session_id = context.user_data.get('session_id')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        progress_service = ProgressService()
        await progress_service.record_question_attempt(
            user_id=user.id,
            question_id=None,
            user_answer="skipped",
            is_correct=False,
            session_id=session_id
        )
        
        await query.edit_message_text(
            "‚è≠Ô∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...",
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await generate_next_question(update, context, user.id, session_id)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")


async def handle_restart_learning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AI-–∞–≥–µ–Ω—Ç–µ
        learning_graph = context.application.bot_data.get('learning_graph')
        if learning_graph:
            learning_graph.clear_user_context(user.id)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        user_service = UserService()
        active_session = await user_service.get_active_session(user.id)
        if active_session:
            await user_service.update_session_state(active_session.id, "abandoned")
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞
        context.user_data.clear()
        
        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        await handle_start_learning(update, context)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")


async def handle_select_topic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
        from database.database import db_manager
        from database.models import Topic
        from sqlalchemy import select
        
        async with db_manager.get_session() as session:
            result = await session.execute(
                select(Topic)
                .where(Topic.is_active == True)
                .order_by(Topic.order_index)
            )
            topics = result.scalars().all()
        
        if not topics:
            await query.edit_message_text(
                "üìö –¢–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º
        topics_text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\n\n"
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = []
        
        for topic in topics:
            difficulty_stars = "‚≠ê" * topic.difficulty_level
            topics_text += f"{difficulty_stars} <b>{topic.title}</b>\n"
            topics_text += f"   <i>{topic.description}</i>\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{difficulty_stars} {topic.title}",
                    callback_data=f"topic_{topic.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            text=topics_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã: {e}")


async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–µ–º—ã
        topic_id = int(query.data.split('_')[1])
        
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            return
        
        # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        learning_graph = context.application.bot_data.get('learning_graph')
        if learning_graph:
            result = await learning_graph.start_learning_session(user.id, topic_id)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            user_service = UserService()
            session = await user_service.create_learning_session(user.id, topic_id)
            
            if "generated_question" in result:
                await present_question(update, context, result["generated_question"], session.id)
            else:
                await query.edit_message_text(
                    f"üéì –ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã!\n\n–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...",
                    reply_markup=get_main_menu_keyboard()
                )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã: {e}")


def register_lesson_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ä–æ–∫–æ–≤."""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—É—á–µ–Ω–∏–µ–º
    application.add_handler(CallbackQueryHandler(handle_start_learning, pattern="^start_learning$"))
    application.add_handler(CallbackQueryHandler(handle_continue_lesson, pattern="^continue_lesson$"))
    application.add_handler(CallbackQueryHandler(handle_restart_learning, pattern="^restart_learning$"))
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã
    application.add_handler(CallbackQueryHandler(handle_select_topic, pattern="^select_topic$"))
    application.add_handler(CallbackQueryHandler(handle_topic_selection, pattern=r"^topic_\d+$"))
    
    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    application.add_handler(CallbackQueryHandler(handle_answer, pattern=r"^answer_.*_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_hint, pattern="^hint_.*"))
    application.add_handler(CallbackQueryHandler(handle_skip_question, pattern="^skip_.*"))