"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
"""

import logging
from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler, CommandHandler

try:
    from database.database import get_user_by_telegram_id
    from services.user_service import UserService
    DATABASE_AVAILABLE = True
except ImportError:
    logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è chat_handler")
    DATABASE_AVAILABLE = False

from bot.keyboards.main_menu import get_question_menu_keyboard, get_main_menu_keyboard

try:
    from ai_agent.rag.knowledge_base import QueryProcessor
    RAG_AVAILABLE = True
except ImportError:
    logging.warning("‚ö†Ô∏è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    RAG_AVAILABLE = False


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_QUESTION = 1


async def handle_ask_question_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤ AI."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
    
    try:
        question_text = """
ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ä–∏—Å–∫–∞–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–µ—Ç–æ–¥–∏–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞.

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ –≤ –æ—Ñ–∏—Å–µ?"
‚Ä¢ "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?"
‚Ä¢ "–ö–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–∏–ø—ã —É–≥—Ä–æ–∑?"
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ RTO –∏ MTPD?"
‚Ä¢ "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞?"

üìù <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</b>
        """
        
        await query.edit_message_text(
            text=question_text,
            reply_markup=get_question_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


async def handle_new_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
    
    try:
        await query.edit_message_text(
            "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞:",
            parse_mode='HTML'
        )
        
        return WAITING_FOR_QUESTION
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return ConversationHandler.END


async def process_user_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
        user = None
        if DATABASE_AVAILABLE:
            try:
                user = await get_user_by_telegram_id(update.effective_user.id)
                if not user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                    return ConversationHandler.END
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        question = update.message.text
        logging.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {question[:50]}...")
        
        # –ò–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ AI
        knowledge_base = context.application.bot_data.get('knowledge_base')
        if not knowledge_base:
            await update.message.reply_text(
                "üòî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ RAG
        if RAG_AVAILABLE:
            query_processor = QueryProcessor(knowledge_base)
            user_context = {"difficulty": user.current_difficulty_level if user else 1}
            
            query_result = await query_processor.process_query(question, user_context)
            
            if "error" in query_result:
                await update.message.reply_text(
                    f"üòî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {query_result['error']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return ConversationHandler.END
        else:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ QueryProcessor
            try:
                relevant_docs = await knowledge_base.search(question, limit=3)
                query_result = {
                    "relevant_documents": [
                        {"content": doc.page_content, "metadata": doc.metadata}
                        for doc in relevant_docs
                    ],
                    "confidence": 0.8 if relevant_docs else 0.2,
                    "suggestions": []
                }
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                query_result = {"relevant_documents": [], "confidence": 0, "suggestions": []}
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        response = await generate_ai_response(question, query_result, context)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ï—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="new_question"),
                InlineKeyboardButton("üîç –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã", callback_data=f"related_{hash(question)}")
            ],
            [
                InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data=f"helpful_yes_{hash(question)}"),
                InlineKeyboardButton("üëé –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data=f"helpful_no_{hash(question)}")
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        await update.message.reply_text(
            text=response,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if DATABASE_AVAILABLE and user:
            try:
                user_service = UserService()
                await user_service.save_chat_message(
                    user_id=user.id,
                    message_type="user",
                    content=question
                )
                
                await user_service.save_chat_message(
                    user_id=user.id,
                    message_type="assistant", 
                    content=response,
                    context_used=query_result.get("relevant_documents", []),
                    confidence_score=query_result.get("confidence", 0)
                )
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        
        # –ü–æ–∫–∞–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        suggestions = query_result.get("suggestions", [])
        if suggestions:
            await show_related_questions(update, context, suggestions)
        
        return ConversationHandler.END
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END


async def generate_ai_response(question: str, query_result: Dict[str, Any], context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ RAG."""
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        relevant_docs = query_result.get("relevant_documents", [])
        context_text = "\n\n".join([
            doc["content"] for doc in relevant_docs[:3]
        ])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        query_type = query_result.get("query_type", "general")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ LLM
        llm = context.application.bot_data.get('llm')
        
        if llm and context_text:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                from ai_agent.llm.prompts.qwen_prompts import QwenPrompts
                
                user_prompt = QwenPrompts.RAG_ASSISTANT.format(
                    context=context_text,
                    question=question
                )
                
                try:
                    from langchain_core.messages import HumanMessage, SystemMessage
                    
                    messages = [
                        SystemMessage(content=QwenPrompts.SYSTEM_EXPERT),
                        HumanMessage(content=user_prompt)
                    ]
                    
                    response = await llm.ainvoke(messages)
                    
                    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    ai_response = response.content.strip()
                    if len(ai_response) > 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
                        return ai_response
                    
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM: {e}")
                    
            except ImportError:
                logging.warning("‚ö†Ô∏è Prompts –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –§–∞–ª–ª–±–µ–∫: –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if not context_text:
            return """
üòî <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –º–µ—Ç–æ–¥–∏–∫–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.</b>

üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ó–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ —Ä–∏—Å–∫–∞–º

‚ùì <b>–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ:</b>
‚Ä¢ –¢–∏–ø–∞–º —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞–º –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
‚Ä¢ –†–∞—Å—á–µ—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–ª–∞–Ω–∞–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            """
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        response = f"""
üìö <b>–û—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∏–∫–∏ –±–∞–Ω–∫–∞:</b>

{context_text[:800]}{"..." if len(context_text) > 800 else ""}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
–ò–∑—É—á–∏—Ç–µ –ø–æ–ª–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        
        return response
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI: {e}")
        return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."


async def show_related_questions(update: Update, context: ContextTypes.DEFAULT_TYPE, suggestions: List[str]):
    """–ü–æ–∫–∞–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    try:
        if not suggestions:
            return
        
        related_text = "üîó <b>–°–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        keyboard = []
        
        for i, suggestion in enumerate(suggestions[:3], 1):
            related_text += f"{i}. {suggestion}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{i}. {suggestion[:50]}{'...' if len(suggestion) > 50 else ''}",
                    callback_data=f"suggest_{i}_{hash(suggestion)}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=related_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['suggestions'] = suggestions
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    try:
        if update.message:
            await update.message.reply_text(
                "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=get_main_menu_keyboard()
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
    
    return ConversationHandler.END


def register_chat_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞ —Å AI."""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: ConversationHandler –±–µ–∑ per_message –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ fallbacks
    question_conversation = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_new_question, pattern="^new_question$")],
        states={
            WAITING_FOR_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_question),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(cancel_conversation, pattern="^main_menu$"),
            CallbackQueryHandler(cancel_conversation, pattern="^cancel$"),
            CommandHandler("cancel", cancel_conversation)
        ],
        per_chat=True,
        per_user=True
    )
    
    application.add_handler(question_conversation)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_ask_question_menu, pattern="^ask_question$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    application.add_handler(CallbackQueryHandler(handle_feedback, pattern="^helpful_(yes|no)_.*"))


async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –æ—Ç–≤–µ—Ç—É."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
    
    try:
        callback_parts = query.data.split('_')
        feedback_type = callback_parts[1]  # yes –∏–ª–∏ no
        question_hash = callback_parts[2]
        
        if feedback_type == "yes":
            await query.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –ø–æ–º–æ—á—å.")
        else:
            await query.answer("üëé –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logging.info(f"üìä –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback_type} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_hash}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")