"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
"""

import logging
from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler, CommandHandler

from database.database import get_user_by_telegram_id
from services.user_service import UserService
from bot.keyboards.main_menu import get_question_menu_keyboard, get_main_menu_keyboard
from ai_agent.rag.knowledge_base import QueryProcessor


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_QUESTION = 1


async def handle_ask_question_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤ AI."""
    query = update.callback_query
    await query.answer()
    
    try:
        question_text = """
ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ä–∏—Å–∫–∞–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–µ—Ç–æ–¥–∏–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞.

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ –≤ –æ—Ñ–∏—Å–µ?"
‚Ä¢ "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?"
‚Ä¢ "–ö–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–∏–ø—ã —É–≥—Ä–æ–∑?"
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ RTO –∏ MTPD?"
‚Ä¢ "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞?"

üìù <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</b>
        """
        
        await query.edit_message_text(
            text=question_text,
            reply_markup=get_question_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


async def handle_new_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        await query.edit_message_text(
            "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞:",
            parse_mode='HTML'
        )
        
        return WAITING_FOR_QUESTION
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return ConversationHandler.END


async def process_user_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return ConversationHandler.END
        
        question = update.message.text
        logging.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {question[:50]}...")
        
        # –ò–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ AI
        knowledge_base = context.application.bot_data.get('knowledge_base')
        if not knowledge_base:
            await update.message.reply_text(
                "üòî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ RAG
        query_processor = QueryProcessor(knowledge_base)
        user_context = {"difficulty": user.current_difficulty_level}
        
        query_result = await query_processor.process_query(question, user_context)
        
        if "error" in query_result:
            await update.message.reply_text(
                f"üòî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {query_result['error']}",
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM
        response = await generate_ai_response(question, query_result, context)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ï—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="new_question"),
                InlineKeyboardButton("üîç –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã", callback_data=f"related_{hash(question)}")
            ],
            [
                InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data=f"helpful_yes_{hash(question)}"),
                InlineKeyboardButton("üëé –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data=f"helpful_no_{hash(question)}")
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        await update.message.reply_text(
            text=response,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        user_service = UserService()
        await user_service.save_chat_message(
            user_id=user.id,
            message_type="user",
            content=question
        )
        
        await user_service.save_chat_message(
            user_id=user.id,
            message_type="assistant", 
            content=response,
            context_used=query_result.get("relevant_documents", []),
            confidence_score=query_result.get("confidence", 0)
        )
        
        # –ü–æ–∫–∞–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        suggestions = query_result.get("suggestions", [])
        if suggestions:
            await show_related_questions(update, context, suggestions)
        
        return ConversationHandler.END
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END


async def generate_ai_response(question: str, query_result: Dict[str, Any], context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ RAG."""
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        relevant_docs = query_result.get("relevant_documents", [])
        context_text = "\n\n".join([
            doc["content"] for doc in relevant_docs[:3]
        ])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        query_type = query_result.get("query_type", "general")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        system_prompts = {
            "definition": "–î–∞–π—Ç–µ —á–µ—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤.",
            "instruction": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –¥–µ–π—Å—Ç–≤–∏–π.",
            "explanation": "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã —è–≤–ª–µ–Ω–∏—è.",
            "calculation": "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –ø—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤.",
            "example": "–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.",
            "general": "–î–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."
        }
        
        system_prompt = f"""
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞.
{system_prompts.get(query_type, system_prompts['general'])}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏ –±–∞–Ω–∫–∞.
–û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Ç–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ.
–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ –æ–± —ç—Ç–æ–º —Å–∫–∞–∂–∏—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫—É—Ä—Å–∏–≤, —Å–ø–∏—Å–∫–∏).
        """
        
        user_prompt = f"""
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏ –±–∞–Ω–∫–∞:
{context_text}

–í–æ–ø—Ä–æ—Å: {question}

–î–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∏–∫–∏.
        """
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ LLM
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ LLM API
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        
        if not context_text:
            return """
üòî <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –º–µ—Ç–æ–¥–∏–∫–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.</b>

üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ó–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ —Ä–∏—Å–∫–∞–º

‚ùì <b>–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ:</b>
‚Ä¢ –¢–∏–ø–∞–º —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞–º –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
‚Ä¢ –†–∞—Å—á–µ—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–ª–∞–Ω–∞–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            """
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        response = f"""
üìö <b>–û—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∏–∫–∏ –±–∞–Ω–∫–∞:</b>

{context_text[:800]}{"..." if len(context_text) > 800 else ""}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
–ò–∑—É—á–∏—Ç–µ –ø–æ–ª–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        
        return response
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI: {e}")
        return "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."


async def show_related_questions(update: Update, context: ContextTypes.DEFAULT_TYPE, suggestions: List[str]):
    """–ü–æ–∫–∞–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    try:
        if not suggestions:
            return
        
        related_text = "üîó <b>–°–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        keyboard = []
        
        for i, suggestion in enumerate(suggestions[:3], 1):
            related_text += f"{i}. {suggestion}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{i}. {suggestion[:50]}{'...' if len(suggestion) > 50 else ''}",
                    callback_data=f"suggest_{i}_{hash(suggestion)}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=related_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['suggestions'] = suggestions
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


async def handle_question_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        user_service = UserService()
        chat_history = await user_service.get_user_chat_history(user.id, 10)
        
        if not chat_history:
            await query.edit_message_text(
                "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞</b>\n\n–í—ã –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.",
                reply_markup=get_question_menu_keyboard(),
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history_text = "üìú <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        
        user_questions = [msg for msg in chat_history if msg.message_type == "user"]
        
        for i, message in enumerate(user_questions[:5], 1):
            question = message.content
            date = message.created_at.strftime("%d.%m %H:%M")
            history_text += f"{i}. <i>{date}</i>\n"
            history_text += f"   {question[:100]}{'...' if len(question) > 100 else ''}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text=history_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


async def handle_search_methodology(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç–æ–¥–∏–∫–µ."""
    query = update.callback_query
    await query.answer()
    
    try:
        search_text = """
üîç <b>–ü–æ–∏—Å–∫ –≤ –º–µ—Ç–æ–¥–∏–∫–µ</b>

–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç–æ–¥–∏–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
‚Ä¢ "—Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã"
‚Ä¢ "–º–∞—Ç—Ä–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤"
‚Ä¢ "–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞"
‚Ä¢ "–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥"

üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b>
        """
        
        await query.edit_message_text(
            text=search_text,
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        context.user_data['waiting_for_search'] = True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç–æ–¥–∏–∫–µ: {e}")


async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    try:
        faq_data = [
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ RTO –∏ MTPD?",
                "answer": "RTO - –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞, MTPD - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å—Ç–æ—è"
            },
            {
                "question": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã —É–≥—Ä–æ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
                "answer": "–¢–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ, –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ, –±–∏–æ–ª–æ–≥–æ-—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ"
            },
            {
                "question": "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤?",
                "answer": "–ü—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, —É–≥—Ä–æ–∑–∞—Ö –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
            },
            {
                "question": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ –≤ –æ—Ñ–∏—Å–µ?",
                "answer": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –û–ù–∏–í–î, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏"
            },
            {
                "question": "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∏—Å–∫–∞?",
                "answer": "–ü–æ —Ñ–æ—Ä–º—É–ª–µ T_R = T_rec_AC + T_rec_Office + T_move √ó F_strategy + T_rec_process"
            }
        ]
        
        faq_text = "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        keyboard = []
        
        for i, faq in enumerate(faq_data, 1):
            faq_text += f"{i}. <b>{faq['question']}</b>\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{i}. {faq['question']}",
                    callback_data=f"faq_{i}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            text=faq_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FAQ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['faq_data'] = faq_data
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ FAQ: {e}")


async def handle_faq_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ FAQ."""
    query = update.callback_query
    await query.answer()
    
    try:
        faq_index = int(query.data.split('_')[1]) - 1
        faq_data = context.user_data.get('faq_data', [])
        
        if faq_index < 0 or faq_index >= len(faq_data):
            await query.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        faq = faq_data[faq_index]
        
        answer_text = f"""
‚ùì <b>{faq['question']}</b>

üí° <b>–û—Ç–≤–µ—Ç:</b>
{faq['answer']}

üìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–¥–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
        """
        
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question"),
                InlineKeyboardButton("üîô –ö FAQ", callback_data="faq")
            ],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text=answer_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ FAQ: {e}")


async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –æ—Ç–≤–µ—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    try:
        callback_parts = query.data.split('_')
        feedback_type = callback_parts[1]  # yes –∏–ª–∏ no
        question_hash = callback_parts[2]
        
        if feedback_type == "yes":
            await query.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –ø–æ–º–æ—á—å.")
        else:
            await query.answer("üëé –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logging.info(f"üìä –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback_type} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_hash}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")


async def handle_related_topics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º."""
    query = update.callback_query
    await query.answer()
    
    try:
        suggestions = context.user_data.get('suggestions', [])
        
        if not suggestions:
            await query.answer("‚ùå –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        related_text = "üîó <b>–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        keyboard = []
        
        for i, suggestion in enumerate(suggestions[:5], 1):
            related_text += f"{i}. {suggestion}\n\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùì {suggestion[:40]}{'...' if len(suggestion) > 40 else ''}",
                    callback_data=f"ask_suggestion_{i}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        await query.edit_message_text(
            text=related_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º: {e}")


async def handle_suggested_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        suggestion_index = int(query.data.split('_')[2]) - 1
        suggestions = context.user_data.get('suggestions', [])
        
        if suggestion_index < 0 or suggestion_index >= len(suggestions):
            await query.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        suggested_question = suggestions[suggestion_index]
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        class MockUpdate:
            def __init__(self, text):
                self.message = MockMessage(text)
                self.effective_user = update.effective_user
                self.effective_chat = update.effective_chat
        
        class MockMessage:
            def __init__(self, text):
                self.text = text
        
        mock_update = MockUpdate(suggested_question)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await process_user_question(mock_update, context)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")


async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    try:
        if not context.user_data.get('waiting_for_search'):
            return
        
        search_query = update.message.text
        context.user_data['waiting_for_search'] = False
        
        # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        knowledge_base = context.application.bot_data.get('knowledge_base')
        if not knowledge_base:
            await update.message.reply_text(
                "üòî –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        search_results = await knowledge_base.search(search_query, limit=5)
        
        if not search_results:
            await update.message.reply_text(
                f"üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {search_query}\n\n‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.",
                reply_markup=get_question_menu_keyboard(),
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        results_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {search_query}\n\n"
        
        for i, doc in enumerate(search_results[:3], 1):
            content = doc.page_content
            metadata = doc.metadata
            
            # –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if len(content) > 200:
                content = content[:200] + "..."
            
            results_text += f"{i}. <b>{metadata.get('topic', '–ú–µ—Ç–æ–¥–∏–∫–∞')}</b>\n"
            results_text += f"   {content}\n\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_methodology"),
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="new_question")
            ],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.message.reply_text(
            text=results_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END


def register_chat_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞ —Å AI."""
    
    # Conversation handler –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù)
    question_conversation = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_new_question, pattern="^new_question$")],
    states={
        WAITING_FOR_QUESTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_question),
        ],
    },
    fallbacks=[
        CallbackQueryHandler(cancel_conversation, pattern="^main_menu$"),
        CommandHandler("cancel", cancel_conversation)
    ],
    per_message=False,
    per_chat=True,
    per_user=True
)
    
    application.add_handler(question_conversation)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_ask_question_menu, pattern="^ask_question$"))
    application.add_handler(CallbackQueryHandler(handle_question_history, pattern="^question_history$"))
    application.add_handler(CallbackQueryHandler(handle_search_methodology, pattern="^search_methodology$"))
    application.add_handler(CallbackQueryHandler(handle_faq, pattern="^faq$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FAQ
    application.add_handler(CallbackQueryHandler(handle_faq_answer, pattern=r"^faq_\d+$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    application.add_handler(CallbackQueryHandler(handle_feedback, pattern="^helpful_(yes|no)_.*"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º
    application.add_handler(CallbackQueryHandler(handle_related_topics, pattern="^related_.*"))
    application.add_handler(CallbackQueryHandler(handle_suggested_question, pattern=r"^ask_suggestion_\d+$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å—Ä–µ–¥–∏ MessageHandler)
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
            handle_search_query
        ),
        group=10  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    )