"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

try:
    from database.database import get_user_by_telegram_id, db_manager
    from database.models import User, QuestionAttempt, LearningSession
    from services.progress_service import ProgressService
    from sqlalchemy import select, func, desc
    DATABASE_AVAILABLE = True
except ImportError:
    logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è progress_handler")
    DATABASE_AVAILABLE = False

from bot.keyboards.main_menu import get_main_menu_keyboard


async def handle_show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        if not DATABASE_AVAILABLE:
            await query.edit_message_text(
                "üòî –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        user_telegram_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(user_telegram_id)
        if not user:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        progress_data = await get_user_progress_data(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_text = format_progress_message(user, progress_data)
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats"),
                InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")
            ],
            [
                InlineKeyboardButton("üìö –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_learning"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        await query.edit_message_text(
            text=progress_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await query.edit_message_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
            reply_markup=get_main_menu_keyboard()
        )


async def get_user_progress_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        async with db_manager.get_session() as session:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
            total_stats = await session.execute(
                select(
                    func.count(QuestionAttempt.id).label('total'),
                    func.sum(func.cast(QuestionAttempt.is_correct, func.Integer())).label('correct'),
                    func.avg(QuestionAttempt.time_spent_seconds).label('avg_time')
                )
                .where(QuestionAttempt.user_id == user_id)
            )
            
            total_data = total_stats.first()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            week_ago = datetime.utcnow() - timedelta(days=7)
            weekly_stats = await session.execute(
                select(
                    func.count(QuestionAttempt.id).label('total'),
                    func.sum(func.cast(QuestionAttempt.is_correct, func.Integer())).label('correct')
                )
                .where(
                    QuestionAttempt.user_id == user_id,
                    QuestionAttempt.created_at >= week_ago
                )
            )
            
            weekly_data = weekly_stats.first()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
            sessions_count = await session.execute(
                select(func.count(LearningSession.id))
                .where(LearningSession.user_id == user_id)
            )
            
            sessions = sessions_count.scalar() or 0
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            last_attempt = await session.execute(
                select(QuestionAttempt.created_at)
                .where(QuestionAttempt.user_id == user_id)
                .order_by(desc(QuestionAttempt.created_at))
                .limit(1)
            )
            
            last_activity = last_attempt.scalar()
            
            return {
                'total_questions': total_data.total or 0,
                'correct_answers': total_data.correct or 0,
                'avg_time': total_data.avg_time or 0,
                'weekly_questions': weekly_data.total or 0,
                'weekly_correct': weekly_data.correct or 0,
                'sessions_count': sessions,
                'last_activity': last_activity
            }
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return {
            'total_questions': 0,
            'correct_answers': 0,
            'avg_time': 0,
            'weekly_questions': 0,
            'weekly_correct': 0,
            'sessions_count': 0,
            'last_activity': None
        }


def format_progress_message(user, progress_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    total_accuracy = 0
    if progress_data['total_questions'] > 0:
        total_accuracy = (progress_data['correct_answers'] / progress_data['total_questions']) * 100
    
    # –†–∞—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    weekly_accuracy = 0
    if progress_data['weekly_questions'] > 0:
        weekly_accuracy = (progress_data['weekly_correct'] / progress_data['weekly_questions']) * 100
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    level_name = get_level_name(user.current_difficulty_level)
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    last_activity_text = "–ù–∏–∫–æ–≥–¥–∞"
    if progress_data['last_activity']:
        days_ago = (datetime.utcnow() - progress_data['last_activity']).days
        if days_ago == 0:
            last_activity_text = "–°–µ–≥–æ–¥–Ω—è"
        elif days_ago == 1:
            last_activity_text = "–í—á–µ—Ä–∞"
        else:
            last_activity_text = f"{days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    accuracy_emoji = "üî•" if total_accuracy >= 80 else "üëç" if total_accuracy >= 60 else "üìö"
    level_emoji = "‚≠ê" if user.current_difficulty_level >= 4 else "üöÄ" if user.current_difficulty_level >= 3 else "üìà"
    
    return f"""
üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</b>

{level_emoji} <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {user.current_difficulty_level}/5 ({level_name})

{accuracy_emoji} <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {progress_data['total_questions']}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {progress_data['correct_answers']}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {total_accuracy:.1f}%
‚Ä¢ –°–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è: {progress_data['sessions_count']}

üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: {progress_data['weekly_questions']}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {progress_data['weekly_correct']}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {weekly_accuracy:.1f}%

üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_activity_text}

{get_progress_recommendation(user.current_difficulty_level, total_accuracy)}
    """


def get_level_name(level: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è."""
    level_names = {
        1: "–ù–æ–≤–∏—á–æ–∫",
        2: "–ò–∑—É—á–∞—é—â–∏–π", 
        3: "–ü—Ä–∞–∫—Ç–∏–∫",
        4: "–≠–∫—Å–ø–µ—Ä—Ç",
        5: "–ú–∞—Å—Ç–µ—Ä"
    }
    return level_names.get(level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


def get_progress_recommendation(level: int, accuracy: float) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    if accuracy >= 90:
        return "üéØ <b>–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</b> –í—ã –≥–æ—Ç–æ–≤—ã –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º —Ç–µ–º–∞–º."
    elif accuracy >= 70:
        return "üí™ <b>–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–º."
    elif accuracy >= 50:
        return "üìö <b>–ï—Å—Ç—å –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.</b> –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
    else:
        return "üéì <b>–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –æ—Å–Ω–æ–≤.</b> –ò–∑—É—á–∏—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."


async def handle_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        user_telegram_id = update.effective_user.id
        user = await get_user_by_telegram_id(user_telegram_id)
        
        if not user:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        detailed_stats = await get_detailed_statistics(user.id)
        stats_text = format_detailed_stats(detailed_stats)
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="show_progress")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text=stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def get_detailed_statistics(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        async with db_manager.get_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            daily_stats = []
            for i in range(7):
                day_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=i)
                day_end = day_start + timedelta(days=1)
                
                day_result = await session.execute(
                    select(
                        func.count(QuestionAttempt.id).label('total'),
                        func.sum(func.cast(QuestionAttempt.is_correct, func.Integer())).label('correct')
                    )
                    .where(
                        QuestionAttempt.user_id == user_id,
                        QuestionAttempt.created_at >= day_start,
                        QuestionAttempt.created_at < day_end
                    )
                )
                
                day_data = day_result.first()
                daily_stats.append({
                    'date': day_start.strftime('%d.%m'),
                    'total': day_data.total or 0,
                    'correct': day_data.correct or 0
                })
            
            return {'daily_stats': daily_stats}
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'daily_stats': []}


def format_detailed_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    text = "üìà <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
    
    for day in reversed(stats['daily_stats']):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        if day['total'] > 0:
            accuracy = (day['correct'] / day['total']) * 100
            text += f"üìÖ <b>{day['date']}</b>: {day['correct']}/{day['total']} ({accuracy:.0f}%)\n"
        else:
            text += f"üìÖ <b>{day['date']}</b>: –ù–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
    
    return text


async def handle_get_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Callback query error: {e}")
    
    try:
        user_telegram_id = update.effective_user.id
        user = await get_user_by_telegram_id(user_telegram_id)
        
        if not user:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        progress_data = await get_user_progress_data(user.id)
        recommendations = generate_recommendations(user, progress_data)
        
        keyboard = [
            [InlineKeyboardButton("üìö –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", callback_data="start_learning")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="show_progress")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text=recommendations,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")


def generate_recommendations(user, progress_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    
    total_accuracy = 0
    if progress_data['total_questions'] > 0:
        total_accuracy = (progress_data['correct_answers'] / progress_data['total_questions']) * 100
    
    level = user.current_difficulty_level
    
    recommendations = "üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é
    if level == 1:
        recommendations += "üìö <b>–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
        recommendations += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (RTO, MTPD)\n"
        recommendations += "‚Ä¢ –†–∞–∑–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–∏—Å–∫–æ–≤\n"
        recommendations += "‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏\n\n"
    elif level == 2:
        recommendations += "üìà <b>–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è —É—Ä–æ–≤–µ–Ω—å:</b>\n"
        recommendations += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–∏–ø—ã —É–≥—Ä–æ–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n"
        recommendations += "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤\n"
        recommendations += "‚Ä¢ –†–µ—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n\n"
    elif level >= 3:
        recommendations += "üöÄ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å:</b>\n"
        recommendations += "‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n"
        recommendations += "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        recommendations += "‚Ä¢ –£–≥–ª—É–±–ª—è–π—Ç–µ—Å—å –≤ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
    if total_accuracy < 60:
        recommendations += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>\n"
        recommendations += "‚Ä¢ –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ–ª—è–π—Ç–µ —Ç–µ–æ—Ä–∏–∏\n"
        recommendations += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö\n"
        recommendations += "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n"
        recommendations += "‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    last_activity = progress_data.get('last_activity')
    if last_activity:
        days_ago = (datetime.utcnow() - last_activity).days
        if days_ago > 3:
            recommendations += "‚è∞ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:</b>\n"
            recommendations += "‚Ä¢ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 10-15 –º–∏–Ω—É—Ç\n"
            recommendations += "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            recommendations += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —É–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
    
    recommendations += "üéì <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
    recommendations += "‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–∫\n"
    recommendations += "‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ª–æ–∂–Ω—ã–º —Ç–µ–º–∞–º\n"
    recommendations += "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    
    return recommendations


def register_progress_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    application.add_handler(CallbackQueryHandler(handle_show_progress, pattern="^show_progress$"))
    application.add_handler(CallbackQueryHandler(handle_detailed_stats, pattern="^detailed_stats$"))
    application.add_handler(CallbackQueryHandler(handle_get_recommendations, pattern="^get_recommendations$"))