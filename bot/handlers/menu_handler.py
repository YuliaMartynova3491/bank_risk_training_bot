"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é AI-–∞–≥–µ–Ω—Ç–∞.
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler

from bot.keyboards.main_menu import (
    get_main_menu_keyboard, get_learning_menu_keyboard, 
    get_question_menu_keyboard, get_progress_menu_keyboard,
    get_settings_keyboard, get_difficulty_keyboard,
    get_notification_keyboard, get_back_to_menu_keyboard
)
from config.settings import MessageTemplates
from database.database import get_user_by_telegram_id
from services.progress_service import ProgressService
from services.user_service import UserService


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    try:
        welcome_text = """
üè¶ <b>AI-–ê–≥–µ–Ω—Ç –æ–±—É—á–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–∏—Å–∫–∞–º</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞.

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
‚Ä¢ <b>–û–±—É—á–µ–Ω–∏–µ</b> - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å —Å AI-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
‚Ä¢ <b>–í–æ–ø—Ä–æ—Å—ã</b> - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
‚Ä¢ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b> - —É–∑–Ω–∞–π—Ç–µ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º
        """
        
        await query.edit_message_text(
            text=welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_main_menu: {e}")


async def handle_learning_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        progress_service = ProgressService()
        progress_info = await progress_service.get_user_overall_progress(user.id)
        
        learning_text = f"""
üìö <b>–ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è</b>

üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {progress_info.get('level_name', '–ù–∞—á–∏–Ω–∞—é—â–∏–π')}
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_info.get('completion_percentage', 0):.1f}%
‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {progress_info.get('completed_lessons', 0)}

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
        """
        
        await query.edit_message_text(
            text=learning_text,
            reply_markup=get_learning_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_learning_menu: {e}")


async def handle_question_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤ AI."""
    query = update.callback_query
    await query.answer()
    
    try:
        question_text = """
ü§ñ <b>AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ä–∏—Å–∫–∞–º</b>

–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞. 

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ –≤ –æ—Ñ–∏—Å–µ?"
‚Ä¢ "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?"
‚Ä¢ "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∏–ø—ã —É–≥—Ä–æ–∑?"
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ RTO –∏ MTPD?"

üîç <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –≤ –º–µ—Ç–æ–¥–∏–∫–µ
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        """
        
        await query.edit_message_text(
            text=question_text,
            reply_markup=get_question_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_question_menu: {e}")


async def handle_progress_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        progress_service = ProgressService()
        stats = await progress_service.get_detailed_progress(user.id)
        
        progress_text = f"""
üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</b>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats.get('overall_progress', 0):.1f}%
‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {stats.get('completed_lessons', 0)}/{stats.get('total_lessons', 0)}
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats.get('correct_answers', 0)}/{stats.get('total_answers', 0)}
‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {stats.get('study_time_hours', 0):.1f} —á

üéØ <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {stats.get('current_level', '–ù–∞—á–∏–Ω–∞—é—â–∏–π')}

üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b> {stats.get('achievements_count', 0)}
        """
        
        await query.edit_message_text(
            text=progress_text,
            reply_markup=get_progress_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_progress_menu: {e}")


async def handle_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üë§ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {user.current_difficulty_level}/5
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –Ø–∑—ã–∫: {user.preferred_language.upper()}

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
        """
        
        await query.edit_message_text(
            text=settings_text,
            reply_markup=get_settings_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_settings_menu: {e}")


async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        await query.edit_message_text(
            text=MessageTemplates.HELP,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_help: {e}")


async def handle_difficulty_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        difficulty_text = """
üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b>

üü¢ <b>–ù–∞—á–∏–Ω–∞—é—â–∏–π</b> - –±–∞–∑–æ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üü° <b>–ë–∞–∑–æ–≤—ã–π</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –º–µ—Ç–æ–¥—ã
üü† <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b> - —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç—ã
üî¥ <b>–≠–∫—Å–ø–µ—Ä—Ç</b> - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∫–µ–π—Å—ã –∏ –∞–Ω–∞–ª–∏–∑
üü£ <b>–ú–∞—Å—Ç–µ—Ä</b> - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π

üí° AI-–∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å.
        """
        
        await query.edit_message_text(
            text=difficulty_text,
            reply_markup=get_difficulty_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_difficulty_settings: {e}")


async def handle_difficulty_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
        difficulty_level = int(query.data.split('_')[1])
        
        user_service = UserService()
        await user_service.update_difficulty_level(update.effective_user.id, difficulty_level)
        
        level_names = {1: "–ù–∞—á–∏–Ω–∞—é—â–∏–π", 2: "–ë–∞–∑–æ–≤—ã–π", 3: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 4: "–≠–∫—Å–ø–µ—Ä—Ç", 5: "–ú–∞—Å—Ç–µ—Ä"}
        
        success_text = f"""
‚úÖ <b>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω</b>

–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: <b>{level_names[difficulty_level]}</b>

AI-–∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
        """
        
        await query.edit_message_text(
            text=success_text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_difficulty_change: {e}")


async def handle_notification_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        notification_text = f"""
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

üì± <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

üìã <b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö

‚è∞ <b>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        
        await query.edit_message_text(
            text=notification_text,
            reply_markup=get_notification_keyboard(user.notifications_enabled),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_notification_settings: {e}")


async def handle_notification_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        action = query.data.split('_')[0]  # enable –∏–ª–∏ disable
        new_status = action == "enable"
        
        user_service = UserService()
        await user_service.update_notification_settings(update.effective_user.id, new_status)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        success_text = f"""
‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>{status_text}</b>
        """
        
        await query.edit_message_text(
            text=success_text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_notification_toggle: {e}")


def register_menu_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é."""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(handle_main_menu, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(handle_learning_menu, pattern="^learning_menu$"))
    application.add_handler(CallbackQueryHandler(handle_question_menu, pattern="^ask_question$"))
    application.add_handler(CallbackQueryHandler(handle_progress_menu, pattern="^show_progress$"))
    application.add_handler(CallbackQueryHandler(handle_settings_menu, pattern="^settings$"))
    application.add_handler(CallbackQueryHandler(handle_help, pattern="^show_help$"))
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_analytics, pattern="^analytics$"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    application.add_handler(CallbackQueryHandler(handle_difficulty_settings, pattern="^difficulty_settings$"))
    application.add_handler(CallbackQueryHandler(handle_difficulty_change, pattern="^difficulty_[1-5]$"))
    application.add_handler(CallbackQueryHandler(handle_notification_settings, pattern="^notification_settings$"))
    application.add_handler(CallbackQueryHandler(handle_notification_toggle, pattern="^(enable|disable)_notifications$"))


async def handle_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        user = await get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        analytics_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name or user.username or '–ê–Ω–æ–Ω–∏–º'}
üéØ <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {user.current_difficulty_level}/5

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ: –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è  
‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ: –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –º–µ—Ç–æ–¥–∏–∫–∏

üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        """
        
        await query.edit_message_text(
            text=analytics_text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_analytics: {e}")